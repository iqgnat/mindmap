{"diagram":{"image":{"x":0,"width":200,"y":0,"pngdata":"iVBORw0KGgoAAAANSUhEUgAAAMgAAADICAYAAACtWK6eAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAsUlEQVR4nO3BAQEAAACCIP+vbkhAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB8GXHmAAFMgHIEAAAAAElFTkSuQmCC","height":200},"elements":{"leftChildren":[],"children":[{"parent":"root","children":[{"parent":"32ab6a28625f","children":[{"parent":"32d6556c672c","children":[{"parent":"1e9caacc8361","children":[],"id":"b1a230433baa","title":"集合"},{"parent":"1e9caacc8361","children":[],"id":"b0a64da91353","title":"线性结构"},{"parent":"1e9caacc8361","children":[],"id":"e99fc74cac52","title":"树形结构"},{"parent":"1e9caacc8361","children":[],"id":"76869f8f51c5","title":"图形结构"}],"id":"1e9caacc8361","title":"逻辑结构"},{"parent":"32d6556c672c","children":[{"parent":"4e0959e8d52c","children":[],"id":"d28bd2c93470","title":"顺序存储"},{"parent":"4e0959e8d52c","children":[],"id":"0f3cc002d272","title":"链式存储"},{"parent":"4e0959e8d52c","children":[],"id":"450bc8651196","title":"索引存储"},{"parent":"4e0959e8d52c","children":[],"id":"6dd816b6b86e","title":"散列存储"}],"id":"4e0959e8d52c","title":"存储结构"},{"parent":"32d6556c672c","children":[{"parent":"f559359a3714","children":[],"id":"0ef58df7aec5","title":"创建、增删改查、遍历、销毁"}],"id":"f559359a3714","title":"数据操作"}],"collapsed":false,"id":"32d6556c672c","title":"数据结构"},{"parent":"32ab6a28625f","children":[{"parent":"b9884a06305e","children":[{"parent":"9c9ba5aae31d","children":[],"id":"d98686b214f8","title":"抽象类Object：由继承该抽象类的子类表示抽象类型的实现"},{"parent":"9c9ba5aae31d","children":[],"id":"c2c10c759697","title":"抽象Comparable接口：由实现该接口的类表示抽象类型的实现。"}],"id":"9c9ba5aae31d","title":"JAVA泛型"}],"id":"b9884a06305e","title":"数据抽象"},{"parent":"32ab6a28625f","children":[],"collapsed":false,"id":"fbd1b776917c","title":"时间复杂度: 数据元素个数n的多项式的最高次幂的项并去掉其系数"},{"parent":"32ab6a28625f","children":[],"collapsed":false,"id":"dab4557a6eec","title":"空间复杂度：算法执行占用的存储空间量"}],"id":"32ab6a28625f","title":"数据结构的基本概念"},{"parent":"root","children":[{"parent":"b0d629516b24","children":[{"parent":"5ba77b6d511e","children":[],"id":"9210123a191e","title":"Java:&nbsp;IList接口"}],"collapsed":false,"id":"5ba77b6d511e","title":"抽象数据类型"},{"parent":"b0d629516b24","children":[{"parent":"80c19914f1e3","children":[],"id":"e9c14b33e8a6","title":"特点：<br>1. 逻辑上相邻的元素在物理存储位置上也相邻<br>2. 可按照元素的位序号进行随机存取<br>3. 进行插入删除操作需要移动大量的数据元素<br>4. 需要进行存储空间的预先分配，可能会造成空间浪费，但存储密度较高。"}],"collapsed":false,"id":"80c19914f1e3","title":"顺序表（顺序存储）"},{"parent":"b0d629516b24","children":[{"parent":"4b97236b2b29","children":[{"parent":"3ed33324551d","children":[],"id":"cfd8e72c6a6c","title":"特点：<br>1. 存在是否带头结点的考虑（头结点不存放任何数据，指针域存放指向第一个结点的指针）<br>2. 结点的存储空间是在插入和删除过程中动态申请和释放的，不需要预先分配<br>"}],"id":"3ed33324551d","title":"单链表：只包含一个指针域（指向后继节点的指针）的链表"},{"parent":"4b97236b2b29","children":[{"parent":"687cba10d3dc","children":[],"id":"489d85c3a37b","title":"特点：将链表的首尾相接，将尾结点的指针域指向头结点的指针。"}],"id":"687cba10d3dc","title":"循环链表"},{"parent":"4b97236b2b29","children":[{"parent":"9d620ef10993","children":[],"id":"f3a87bbccc8d","title":"特点：具有两个指针域，一个指向前驱结点，一个指向后继结点。使得查找某个结点的前驱结点不需要从表头开始顺着链表依次进行查找，减小时间复杂度。"}],"id":"9d620ef10993","title":"双向链表"},{"parent":"4b97236b2b29","children":[{"parent":"c0484a6b9bf7","children":[],"id":"ddcfca264c58","title":"顺序表：<br>1. 存储密度高，空间开销小。可用数组实现。<br>2. 需要预先分配存储空间。存取的时间复杂度为 O(1)。<br>3. 不便于动态操作（插入、删除）。插入删除元素的复杂度为 O(n)"},{"parent":"c0484a6b9bf7","children":[],"id":"d3c8b27aae40","title":"链表：<br>1. 存储密度低<br>2. 存储空间动态分配<br>3. 插入、删除效率高,时间复杂度为&nbsp;O(1)。<br>4. 不可按照位序号随机存取. 必须从头结点开始沿着后继结点进行访问，时间复杂度O(n)。"}],"id":"c0484a6b9bf7","title":"顺序表和链表的比较"}],"collapsed":false,"id":"4b97236b2b29","title":"链式表（链式存储）"},{"parent":"b0d629516b24","children":[{"parent":"e8e4584a9ec4","image":{"w":227,"h":231,"url":"http://cdn2.processon.com/60978760e4b0bd406b361aa5?e=1620546928&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:zx8Edp94JcpnuIW7OjVYr9afAdE="},"children":[],"id":"6571c33694bd","title":"拉链表"}],"id":"e8e4584a9ec4","title":"hashmap"}],"id":"b0d629516b24","title":"线性表"},{"parent":"root","children":[{"parent":"e3399a1e874b","children":[],"id":"cd538b67d1ee","title":"数据类型定义: Java IStack接口"},{"parent":"e3399a1e874b","children":[{"parent":"a84ce9de3f61","children":[],"id":"795e313dc9e1","title":"特点：<br>先进后出<br>栈顶top"},{"parent":"a84ce9de3f61","children":[{"parent":"7f24ff5beba6","children":[{"parent":"f9a67e3c8efd","children":[],"id":"abc082e31c02","title":"括号匹配语法检查"}],"id":"f9a67e3c8efd","title":"应用"},{"parent":"7f24ff5beba6","children":[{"parent":"0d3bddb4d235","children":[],"id":"fa813a5f9a61","title":"两个栈的栈顶在栈空间的某一位置相遇时，才产生上溢"}],"id":"0d3bddb4d235","title":"多栈空间共享"}],"id":"7f24ff5beba6","title":"顺序栈"},{"parent":"a84ce9de3f61","children":[{"parent":"7bf33c0f983d","children":[],"id":"1d9de4cf596f","title":"特点：<br>1. 依然是入栈出栈只能在栈顶进行，所以不存在在栈的任意位置进行插入和删除的操作，<br>top指向栈顶元素结点，每个结点的指针域指向后继结点。<br>2. 入栈： 构造新结点，改变新结点和首结点的指针域，使新结点成为新的栈顶结点。<br>出栈：修改top指针域的值，返回被删结点的数据域值。"},{"parent":"7bf33c0f983d","children":[],"id":"cf002f451550","title":"应用：汉诺塔问题"}],"id":"7bf33c0f983d","title":"链栈"}],"id":"a84ce9de3f61","title":"栈"},{"parent":"e3399a1e874b","children":[{"parent":"58c0598bf247","children":[],"id":"992bea547d79","title":"特点：<br>先进先出<br>front 队首元素，出队，增加变量<br>rear 队尾元素，入队。"},{"parent":"58c0598bf247","children":[{"parent":"713bd18bf52f","children":[],"id":"b23b7e88cf20","title":"存在假溢出现象，存储单元没有重复使用机制"}],"id":"713bd18bf52f","title":"顺序队列"},{"parent":"58c0598bf247","children":[{"parent":"60629a240dfb","children":[],"id":"d17060d861c8","title":"队空条件: front == rear"},{"parent":"60629a240dfb","children":[],"id":"f160c3da83a6","title":"队满条件: front =(rear +1) %maxSize"}],"id":"60629a240dfb","title":"循环顺序队列"},{"parent":"58c0598bf247","children":[{"parent":"c2ddf76c451e","children":[],"id":"9f077e9b59b2","title":"特点：<br>1.依然不存在在队列的任意位置进行插入和删除的情况，不需要设置头结点，只需要将front和rear分别指向队首结点和队尾结点，每个结点的指针域指向后继结点。"},{"parent":"c2ddf76c451e","children":[],"id":"31bc03c7df9b","title":"也存在假溢出现象"}],"id":"c2ddf76c451e","title":"链队列"},{"parent":"58c0598bf247","children":[{"parent":"c8c678890f9d","children":[],"id":"7387d6449ea1","title":"特点：<br>1. 在普通队列的基础之上将队列中的数据元素按照关键字的值进行有序排列。<br>2. 在队首进行删除操作，插入操作不一定在队尾进行，而是按照优先级插入到队列的合适位置。<br>3. 为了快速访问优先级高的元素，以及快速地插入数据元素，通常使用链式存储结构。"},{"parent":"c8c678890f9d","children":[],"id":"f59f93f483cf","title":"应用：<br>进程服务对CPU的获取<br><br>"}],"id":"c8c678890f9d","title":"优先级队列（堆可以当作优先级队列来使用）"},{"parent":"58c0598bf247","children":[{"parent":"66655e1a18b2","children":[],"id":"7f992a1746d8","title":"双端队列是一种插入和删除操作在两端均可进行的线性表，可以把双端队列看成栈底连在一起的两个栈。他们与两个栈共享存储空间的共享栈的不同指出是，两个栈的栈顶指针式向两端延伸的。由于双端队列允许在两端插入和删除元素，因此需要设立两个指针，分别指向双端队列中两端的元素。<br>允许在一端进行插入和删除（进队和出队），另一端只允许删除的双端队列称为输入受限的双端队列<br>"}],"id":"66655e1a18b2","title":"双端队列"}],"id":"58c0598bf247","title":"队列"},{"parent":"e3399a1e874b","children":[{"parent":"139d14dc974c","children":[],"id":"e8467796d29f","title":"1. 顺序栈可以实现多栈空间共享，而顺序队列不可以"}],"id":"139d14dc974c","title":"栈和队列的比较"}],"id":"e3399a1e874b","title":"栈和队列"},{"parent":"root","children":[{"parent":"6846c4174724","children":[{"parent":"c292c7de9ec7","children":[],"id":"609476775042","title":"串和线性表区别：串是一种特殊的线性表，其中元素全部为字符型；串和线性表的操作有较大的区别；串通常以整体作为操作的对象，而线性表通常以单个元素作为操作的对象。"},{"parent":"c292c7de9ec7","children":[{"parent":"693e1890d98d","children":[],"id":"2997e6a666bf","title":"字符数组构造串"},{"parent":"693e1890d98d","children":[],"id":"e6262966ee75","title":"增、删、比较，往往把字符串看成一个整体"}],"id":"693e1890d98d","title":"顺序串"},{"parent":"c292c7de9ec7","children":[{"parent":"439acdee94d9","children":[],"id":"3a35ab8dcef0","title":"特点：<br>1. 由一系列大小相同的结点组成，每个结点用数据域存放字符<br>2. 若每个结点的数据域为 一个字符 = 单字符链表<br>若每个结点的数据域为 多个字符 = 块链表<br>3. 在串的链式存储中，单字符链表的插入删除操作较为简单，但存储效率低。块链表虽然存储效率高但插入删除操作需要移动字符，较为复杂。"}],"id":"439acdee94d9","title":"链串"},{"parent":"c292c7de9ec7","children":[{"parent":"07ff580a1f70","children":[{"parent":"2a7619c3484d","children":[],"id":"fd908ee23fbb","title":"从主串的第一个字符开始和模式串的第一个字符比较，相等则比较后续字符。不相等则从第二个字符开始重新和模式串进行比较"},{"parent":"2a7619c3484d","children":[],"id":"fd5b4c803817","title":"特点：效率低,存在重复比较"},{"parent":"2a7619c3484d","children":[],"id":"58276fa3f2fd","title":"时间复杂度(m为模式串的长度，n为主串的长度)：最好情况 O(m)，最坏O(m*n)"}],"id":"2a7619c3484d","title":"Brute-Force"},{"parent":"07ff580a1f70","children":[{"parent":"c3be2ddaf510","children":[],"id":"125c36d1bf41","title":"当某次匹配失败时主串的开始比较位置不回退，而是利用部分字符匹配的结果将模式串向右移动较远的距离后再继续进行比较。"}],"id":"c3be2ddaf510","title":"KMP"}],"id":"07ff580a1f70","title":"模式匹配（在当前串寻找模式串）"}],"id":"c292c7de9ec7","title":"串（字符串），数据类型定义，Java IString 接口"},{"parent":"6846c4174724","children":[{"parent":"804a78e0bae7","children":[],"id":"180c46dc815b","title":"顺序存储的随机存储结构：按某种次序在地址连续的存储单元中"},{"parent":"804a78e0bae7","children":[],"id":"6fa2b3646ce3","title":"特点：&nbsp;数组元素被存放在一组地址连续的存储单元里，并且每个元素的大小相同。"},{"parent":"804a78e0bae7","children":[{"parent":"17f0736a185a","children":[],"id":"477c2c07e8bb","title":"行主序"},{"parent":"17f0736a185a","children":[],"id":"bc5c5dcdc79d","title":"列主序"}],"id":"17f0736a185a","title":"遍历"},{"parent":"804a78e0bae7","children":[{"parent":"51df1afe7e01","children":[],"id":"02e269e4b9bf","title":"原则： 呈现规律性分布的、值相同的多个矩阵元素压缩存储到一个存储空间"},{"parent":"51df1afe7e01","children":[{"parent":"24b012970c7b","children":[],"id":"e4a6882edb1c","title":"线性压缩存储"},{"parent":"24b012970c7b","children":[],"id":"2baac2112ebc","title":"三角形的二维数组压缩存储"}],"id":"24b012970c7b","title":"三角矩阵的压缩存储"},{"parent":"51df1afe7e01","children":[],"id":"6724014aaf27","title":"对称矩阵的压缩存储"},{"parent":"51df1afe7e01","children":[],"id":"8f8affefafdb","title":"对角矩阵的压缩存储"},{"parent":"51df1afe7e01","children":[{"parent":"79b869e0a74c","children":[],"id":"6009101471b5","title":"非零元素三元组（行号、列号、元素）"},{"parent":"79b869e0a74c","children":[{"parent":"68349bec4586","children":[],"id":"29101d39f670","title":"当稀疏矩阵中的非零元素的位置或个数经常发生变化时"},{"parent":"68349bec4586","children":[{"parent":"4588bfcd4b5e","children":[],"id":"0da8122a0afc","title":"row: 行号"},{"parent":"4588bfcd4b5e","children":[],"id":"fe28e3af9017","title":"column: 列号"},{"parent":"4588bfcd4b5e","children":[],"id":"db9863152196","title":"value:元素的值"},{"parent":"4588bfcd4b5e","children":[],"id":"74d9e1946fe2","title":"right: 与元素同行的下一个非零元素结点的指针"},{"parent":"4588bfcd4b5e","children":[],"id":"d70736222f08","title":"down：与元素同列的下一个非零元素结点的指针"}],"id":"4588bfcd4b5e","title":"五个域组成"}],"id":"68349bec4586","title":"十字链表存储"},{"parent":"79b869e0a74c","children":[],"id":"0063c52f7abc","title":"原则：只给非零元素分配存储空间"}],"id":"79b869e0a74c","title":"稀疏矩阵的压缩存储"}],"id":"51df1afe7e01","title":"特殊矩阵的压缩存储"},{"parent":"804a78e0bae7","children":[],"id":"d744bbf6cff0","title":"动态数组:&nbsp; 在声明时没有确定数组大小的数组，即忽略圆括号中的下标；当要用它时，可随时用ReDim语句重新指出数组的大小。使用动态数组的优点是可以根据用户需要，有效利用存储空间。"}],"id":"804a78e0bae7","title":"数组（具有n个相同数据类型的数据元素构成的集合）"}],"id":"6846c4174724","title":"串和数组"},{"parent":"root","children":[{"parent":"d59f472a9fc3","children":[],"id":"12765db13bfa","title":"特点:<br>1. 元素之间具有层次关系的非线性结构<br>2. 有且仅有一个被称为根的结点<br>3. 其余结点可分为m个互不相交的有限集合，每个集合又构成一棵树，叫根结点的子树。"},{"parent":"d59f472a9fc3","children":[{"parent":"03e5ade71e9c","children":[{"parent":"ccc7f563b7b7","children":[],"id":"3d867bbaa0c3","title":"顺序存储：层次遍历。对于不完全的，会空置一些结点存储。"},{"parent":"ccc7f563b7b7","children":[{"parent":"dc3cf1fbb6ad","children":[],"id":"6ad26daa2776","title":"二叉链式存储（空间利用率高）:设置两个指针域和一个数据域。<br>每个结点只存储了其孩子结点的单向关系，没有存储到父结点的关系。需要从根结点遍历查找。"},{"parent":"dc3cf1fbb6ad","children":[],"id":"2aa802bf8e3a","title":"三叉链式存储：设置三个指针域和一个数据域： parent、lchild、data、rchild<br>"}],"id":"dc3cf1fbb6ad","title":"链式存储"}],"id":"ccc7f563b7b7","title":"存储结构"},{"parent":"03e5ade71e9c","children":[{"parent":"364e6a678e07","children":[{"parent":"8a19d2ccce6f","children":[],"id":"e2b8d6cef94f","title":"先序遍历"},{"parent":"8a19d2ccce6f","children":[],"id":"ae476cd71db5","title":"中序遍历"},{"parent":"8a19d2ccce6f","children":[],"id":"6f089fd1e15f","title":"后序遍历"},{"parent":"8a19d2ccce6f","children":[],"id":"74f3a92d6ff6","title":"特点：结构简洁、易于实现、但开销大、运行效率低"},{"parent":"8a19d2ccce6f","image":{"w":328,"h":219,"url":"http://cdn2.processon.com/60960e9be4b0bd406b33af11?e=1620450475&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:mVHS-GczwqM8tynxzb0TXXPIyVY="},"children":[],"id":"8c87b63cf679","title":"&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br>"}],"id":"8a19d2ccce6f","title":"递归"},{"parent":"364e6a678e07","children":[{"parent":"2c2036a184cc","children":[],"id":"54ae81c8a124","title":"使用临时遍历保存中间结果，使用循环结构代替递归过程"},{"parent":"2c2036a184cc","children":[{"parent":"43d52e17f07a","children":[],"id":"ce01a03da556","title":"先序：<br>1. 将二叉树的根结点入栈<br>2. 若栈非空，将结点从栈中弹出并访问<br>3. 依次访问当前访问结点的左孩子结点，并将当前结点的右孩子结点入栈<br>4. 重复步骤2、3直到栈为空"},{"parent":"43d52e17f07a","children":[],"id":"35f4d2d92a5f","title":"中序：<br>1. 将二叉树根结点入栈<br>2. 若栈非空，将栈顶结点的左子结点入栈，直到栈顶结点的左子结点为空。<br>3. 将栈顶结点弹出并访问，并使栈顶结点的右子结点入栈<br>4. 重复2、3 直到栈为空"},{"parent":"43d52e17f07a","children":[],"id":"88803cee04c5","title":"后序：先访问左右子树，最后再访问自己。<br>"},{"parent":"43d52e17f07a","children":[],"id":"a35ae37d9dc8","title":"<b>层次:<br>1. 将根结点入队<br>2. 若队非空，取出队首结点并访问，将队首结点的孩子结点入队。<br>3. 重复执行步骤2直到队为空</b>"}],"id":"43d52e17f07a","title":"利用栈保存中间结果：通过回溯访问二叉树的每个结点"}],"id":"2c2036a184cc","title":"非递归"}],"id":"364e6a678e07","title":"遍历方式"},{"parent":"03e5ade71e9c","children":[{"parent":"80d8c9eec2b3","children":[],"id":"a89fc531fe7e","title":"查找算法：结点比左子结点数值大，比右子结点数值小"},{"parent":"80d8c9eec2b3","children":[],"id":"4556cb0371c8","title":"统计二叉树结点个数"},{"parent":"80d8c9eec2b3","children":[],"id":"14ab34cd75c4","title":"求二叉树深度"}],"id":"80d8c9eec2b3","title":"遍历算法的应用"},{"parent":"03e5ade71e9c","children":[{"parent":"5664a7cfebfe","children":[{"parent":"28646325ef1d","image":{"w":693,"h":322,"url":"http://cdn2.processon.com/60962ed5e4b0bd406b33fb79?e=1620458725&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:-3jeOfoxipKiQFrRdTWkeEoyGTc="},"children":[],"id":"0827b9cb0b66","title":""}],"id":"28646325ef1d","title":"由中序和先序遍历序列建立二叉树（不大明白这段代码怎样就实现了创建二叉树）"},{"parent":"5664a7cfebfe","children":[],"id":"dc9f44b23cb4","title":"标明空子树的先序遍历创建二叉树"}],"id":"5664a7cfebfe","title":"二叉树的建立"},{"parent":"03e5ade71e9c","children":[{"parent":"431654fabcc8","children":[],"id":"732bcbef94a2","title":"特性：<br>1. 出现频率越高则权值给得越大，靠近根结点越近，减少判断量（比如学生成绩区域划分）<br>2. 前缀编码"},{"parent":"431654fabcc8","children":[],"id":"4f4c1e21beb9","title":"哈夫曼编码：最早用于解决远距离电报通信的数据传输优化问题"},{"parent":"431654fabcc8","children":[],"id":"5340c2eea22f","title":"给定n个带有权值的结点作为叶结点，构造出的具有最小带权路径长度的二叉树"}],"id":"431654fabcc8","title":"最优二叉树：哈夫曼树及哈夫曼编码（无损压缩技术）"},{"parent":"03e5ade71e9c","children":[{"parent":"8dc552d7edfb","children":[],"id":"2c07f9342c72","title":"①堆通常是一个可以被看做一棵树的数组对象。堆总是满足下列性质：<br>&nbsp;&nbsp;&nbsp;·堆中某个节点的值总是不大于或不小于其父节点的值；<br>&nbsp;&nbsp;&nbsp;·堆总是一棵完全二叉树。<br>将根节点最大的堆叫做最大堆或大根堆，根节点最小的堆叫做最小堆或小根堆。常见的堆有二叉堆、斐波那契堆等。<br>②堆是在程序运行时，而不是在程序编译时，申请某个大小的内存空间。即动态分配内存，对其访问和对一般内存的访问没有区别。<br>③堆是应用程序在运行的时候请求操作系统分配给自己内存，一般是申请/给予的过程。<br>④堆是指程序运行时申请的动态内存，而栈只是指一种使用堆的方法(即先进后出)。"},{"parent":"8dc552d7edfb","children":[],"id":"d6e82213ab7f","title":"动态分配的内存放在系统的堆里"},{"parent":"8dc552d7edfb","image":{"w":441,"h":194,"url":"http://cdn2.processon.com/60974babe4b07df1031caf1d?e=1620531643&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:H0Bu57QZzWIerd8iB1o06skPq3E="},"children":[],"id":"02ca25d919f5","title":""},{"parent":"8dc552d7edfb","children":[],"id":"a307db2c9cf0","title":"heap这种树是按大小排的：从大到小叫max&nbsp;heap，从小到大叫min&nbsp;heap。堆都能用树来表示，并且一般树的实现都是利用链表。而二叉堆是一种特殊的堆，它用完全二叉树表示，却可以利用数组实现。"}],"id":"8dc552d7edfb","title":"堆有时可以看作完全二叉树"}],"id":"03e5ade71e9c","title":"二叉树"},{"parent":"d59f472a9fc3","children":[{"parent":"9c7058ac11be","children":[],"id":"4fd1ef5a9366","title":"树的层次关系必须用链式存储结构存储，通过链连接父节点和孩子结点"},{"parent":"9c7058ac11be","children":[],"id":"1e09d4a2b239","title":"一个结点的多个孩子结点（互称兄弟结点）之间是线性关系，可以采用顺序存储结构或链式存储结构"},{"parent":"9c7058ac11be","children":[],"id":"4a73cb17a3d5","title":"遍历：先序遍历和后序遍历"},{"parent":"9c7058ac11be","image":{"w":313,"h":307,"url":"http://cdn2.processon.com/60974f3be4b0ea2d1a9653a3?e=1620532555&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:aak4LCNVi4zuxijJFyDwVcF38-k="},"children":[],"id":"0fbb3f49dca4","title":""}],"id":"9c7058ac11be","title":"树和森林"},{"parent":"d59f472a9fc3","children":[],"id":"5873c0388fd2","title":"红黑树"}],"id":"d59f472a9fc3","title":"树形结构"},{"parent":"root","children":[{"parent":"3de94eb231c9","children":[],"id":"3a7b476e2ba8","title":"特点:<br>元素间具有多对多关系的非线性数据结构。"},{"parent":"3de94eb231c9","children":[{"parent":"2ba5fe891e5f","children":[{"parent":"4d858cd37215","children":[],"id":"1872e811055c","title":"采用数组存储，每插入或删除一个元素需要移动大量元素。数组容量有限，当扩充容量时，需要复制全部元素，效率更低。"}],"id":"4d858cd37215","title":"邻接矩阵"},{"parent":"2ba5fe891e5f","children":[{"parent":"db842ed6d555","children":[],"id":"cdd0199c12a8","title":"由一个顺序存储的顶点和多个链式存储的边组成"}],"id":"db842ed6d555","title":"邻接表"},{"parent":"2ba5fe891e5f","children":[],"id":"96dab3a73ac2","title":"十字链表"}],"id":"2ba5fe891e5f","title":"存储结构"},{"parent":"3de94eb231c9","image":{"w":257,"h":129,"url":"http://cdn2.processon.com/6096bb20e4b01cae7c743924?e=1620494641&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:TGi7PjQ1m9j6s7-XzCvUGb8c1C8="},"children":[{"parent":"09e14e8c958c","children":[],"id":"35616bc51852","title":"时间复杂度：<br>图有n个顶点和m条边,<br>当图的存储结构是邻接矩阵时，需要扫描邻接矩阵的每一个顶点，时间复杂度为 O(n^2)<br>当图的存储结构是邻接表时，需要扫描每一条单链表，时间复杂度为O(e)"}],"id":"09e14e8c958c","title":"深度有限和广度优先"},{"parent":"3de94eb231c9","children":[{"parent":"0cf9ea01242b","children":[],"id":"4695ca26a28e","title":"问题：<br>1. 指定遍历的第一个顶点<br>2. 由于一个顶点和多个顶点相邻，需要在多个邻接顶点间确定访问次序<br>3. 由于图中存在回路，必须对访问过的顶点做标记，防止出现重复访问同一顶点的情况"}],"id":"0cf9ea01242b","title":"遍历"},{"parent":"3de94eb231c9","children":[{"parent":"191625d5d57b","children":[],"id":"76ab77588561","title":"<font color=\"#c41230\">Kruskal</font>"},{"parent":"191625d5d57b","children":[],"id":"2b2f9dd4c6e2","title":"<font color=\"#c41230\">Prim</font>"},{"parent":"191625d5d57b","children":[],"id":"e12307c54b6d","title":"一个有&nbsp;n&nbsp;个结点的连通图的生成树是原图的极小连通子图，且包含原图中的所有&nbsp;n&nbsp;个结点，并且有保持图连通的最少的边。 最小生成树可以用kruskal（克鲁斯卡尔）算法或prim（普里姆）算法求出。"}],"id":"191625d5d57b","title":"最小生成树"},{"parent":"3de94eb231c9","children":[{"parent":"0b6fca15db9d","children":[{"parent":"9548907221e5","children":[],"id":"4d0a858afe83","title":"某个顶点到其余顶点的最短路径"},{"parent":"9548907221e5","children":[],"id":"affeceb3622d","title":"每一对顶点间的最短路径"}],"id":"9548907221e5","title":"最短路径问题是图论研究中的一个经典算法问题，旨在寻找图（由结点和路径组成的）中两结点之间的最短路径。&nbsp;算法具体的形式包括：&nbsp;确定起点的最短路径问题-&nbsp;也叫单源最短路问题，即已知起始结点，求最短路径的问题。&nbsp;在边权非负时适合使用Dijkstra算法，若边权为负时则适合使用Bellman-ford算法或者SPFA算法。"},{"parent":"0b6fca15db9d","children":[],"id":"faaf6c37bda5","title":"<font color=\"#c41230\">Bellman-ford</font>"},{"parent":"0b6fca15db9d","children":[],"id":"dd67f86adf7a","title":"<font color=\"#c41230\">SPFA</font>"}],"id":"0b6fca15db9d","title":"最短路径"},{"parent":"3de94eb231c9","children":[{"parent":"67390dd14e91","children":[],"id":"0a5a33d6695a","title":"AOV网"},{"parent":"67390dd14e91","children":[],"id":"c20e979d1a45","title":"AOE网"}],"id":"67390dd14e91","title":"拓扑排序和关键路径"}],"id":"3de94eb231c9","title":"图"},{"parent":"root","children":[{"parent":"6c6b113a34ac","children":[],"id":"9a2bb3419444","title":"插入排序（扑克牌整理）"},{"parent":"6c6b113a34ac","children":[],"id":"cce00ba508ba","title":"希尔排序：每次将增量缩小一半，最后一个增量值必须为1"},{"parent":"6c6b113a34ac","children":[{"parent":"1b39e2a11e2c","children":[],"id":"33fa3ac69e2b","title":"冒泡排序（从左到右两两比较）"},{"parent":"1b39e2a11e2c","children":[],"id":"6e226f00951c","title":"快速排序（选择pivot，迭代）"}],"id":"1b39e2a11e2c","title":"交换排序"},{"parent":"6c6b113a34ac","children":[],"id":"fd3bb0718342","title":"选择排序（每次选择最大的元素放在最后）"},{"parent":"6c6b113a34ac","children":[{"parent":"d93fd253d90f","image":{"w":371,"h":165,"url":"http://cdn2.processon.com/6098d36be4b0ea2d1a98da18?e=1620631931&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:IPqfYcWBprwTQBGzfJbDu43qvM4="},"children":[],"id":"805462badf04","title":""}],"id":"d93fd253d90f","title":"堆排序"},{"parent":"6c6b113a34ac","children":[{"parent":"56227459d414","children":[],"id":"4290ce40fb7b","title":"L/R下标的移动"}],"id":"56227459d414","title":"归并排序"},{"parent":"6c6b113a34ac","image":{"w":1113,"h":460,"url":"http://cdn2.processon.com/6098b5d3e4b0a89ba5e2d29d?e=1620624355&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:druWCpY62T8Jink2Q3El44zoXJY="},"children":[],"id":"11b6d8aaeb4e","title":"算法的稳定性：要排序的内容是一个复杂对象的多个数字属性，且其原本的初始顺序存在意义，那么我们需要在二次排序的基础上保持原有排序的意义，才需要使用到稳定性的算法，例如要排序的内容是一组原本按照价格高低排序的对象，如今需要按照销量高低排序，使用稳定性算法，可以使得想同销量的对象依旧保持着价格高低的排序展现，只有销量不同的才会重新排序。（当然，如果需求不需要保持初始的排序意义，那么使用稳定性算法依旧将毫无意义）。"}],"id":"6c6b113a34ac","title":"排序"},{"parent":"root","children":[{"parent":"4158153195da","children":[{"parent":"ae52be9f326d","children":[{"parent":"e20f797c811f","children":[],"id":"55444486ebd1","title":"顺序查找"},{"parent":"e20f797c811f","children":[],"id":"1477ef716662","title":"二分查找"},{"parent":"e20f797c811f","children":[{"parent":"0091f84c2821","image":{"w":361,"h":234,"url":"http://cdn2.processon.com/6098f08fe4b01cae7c776963?e=1620639392&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:nZNuj5gNczuQwX4m2E-cYOqaZfg="},"children":[],"id":"da1199d32e03","title":"块间有序、块内无序"},{"parent":"0091f84c2821","children":[],"id":"dcc72cdc5e45","title":"特点：<br>优点：插入和删除比较容易，无需进行大量移动<br>缺点： 要增加一个索引表的存储空间并堆初始索引表进行排序运算<br>适用情况：如果线性表既要快速查找又经常动态变化，则可用分块查找"}],"id":"0091f84c2821","title":"分块查找（索引查找）"}],"id":"e20f797c811f","title":"静态"},{"parent":"ae52be9f326d","children":[{"parent":"6d937ce89033","children":[{"parent":"d92c23936e28","children":[{"parent":"dd4dd48f1c6e","image":{"w":214,"h":206,"url":"http://cdn2.processon.com/6098f1dfe4b07df1031f9bb5?e=1620639728&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:koflrK_tbSiAgQU0LuvPBJ3ARv0="},"children":[],"id":"32155b058787","title":"样例"}],"id":"dd4dd48f1c6e","title":"二叉排序树查找"},{"parent":"d92c23936e28","children":[],"id":"d016667d5f54","title":"二叉排序树插入"},{"parent":"d92c23936e28","children":[],"id":"cea2ebca7f02","title":"二叉排序树创建"},{"parent":"d92c23936e28","children":[{"parent":"1b7f6c64ef27","image":{"w":422,"h":260,"url":"http://cdn2.processon.com/6098f3a1e4b053dd7b9e858c?e=1620640177&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:j-xHpoqyOIkeB1HbZARm8PcvnXc="},"children":[],"id":"0937ef432e05","title":"左右子树非空， 有两种方法"},{"parent":"1b7f6c64ef27","image":{"w":467,"h":165,"url":"http://cdn2.processon.com/6098f43be4b0aff79a2c8354?e=1620640331&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:igAEL0bFiG09MvAs5IvECslFMzU="},"children":[],"id":"d69c25973033","title":"方法二"},{"parent":"1b7f6c64ef27","image":{"w":470,"h":179,"url":"http://cdn2.processon.com/6098f45ee4b0d722144095e8?e=1620640367&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:L_eFGX1fYr-HwjxqH2RME20rVVw="},"children":[],"id":"2f3e30ae1dd5","title":"方法一"}],"id":"1b7f6c64ef27","title":"二叉排序树删除"}],"id":"d92c23936e28","title":"二叉排序树"},{"parent":"6d937ce89033","children":[{"parent":"25b268071411","children":[],"id":"66bbfbeea632","title":"平衡二叉树在插入节点和删除节点等动态操作上增加了自平衡的操作(通过旋转)"},{"parent":"25b268071411","children":[],"id":"05c88080b391","title":"是二叉排序树的改进版本：左右子树深度之差的绝对值小于2，并左右子树均为平衡二叉树"},{"parent":"25b268071411","children":[],"id":"fffec639181e","title":"1.二叉排序树的定义：<br>某结点左子树的所有结点的值都小于该节点的值且该结点右子树的值都大于该节点的值<br>2.平衡二叉树是特殊的二叉排序树<br>3.平衡因子：左子树高度－右子树高度<br>4.平衡二叉树必须满足以下两个条件：<br>1.必须是二叉排序树<br>2.平衡因子的绝对值小于等于1"}],"id":"25b268071411","title":"平衡二叉树"},{"parent":"6d937ce89033","children":[{"parent":"6078f99e5683","children":[{"parent":"0ff1ccb6c6b9","image":{"w":672,"h":341,"url":"http://cdn2.processon.com/6098fdf9e4b0a89ba5e3b658?e=1620642826&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:ImeV0WllGFGMVOoZLAaNGtNh-bo="},"children":[],"id":"9614e7e773d8","title":""}],"id":"0ff1ccb6c6b9","title":"多路查找树，举例 2-3 树，2-3-4 树"},{"parent":"6078f99e5683","image":{"w":763,"h":254,"url":"http://cdn2.processon.com/6098fe7be4b07df1031fc7c8?e=1620642955&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:R2w_n9muriiiMf5GPpiAIFOImZ8="},"children":[],"id":"49540942f1c3","title":"性质： <br><br>"},{"parent":"6078f99e5683","image":{"w":900,"h":437.0689655172414,"url":"http://cdn2.processon.com/6098ff87e4b0976f0e02f086?e=1620643226&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:qzVEyWodms125btjTJPsbb52IFA="},"children":[],"id":"22415dcd7205","title":"B树查找过程："},{"parent":"6078f99e5683","children":[{"parent":"783616b4b7c9","image":{"w":668,"h":457,"url":"http://cdn2.processon.com/60990313e4b0aff79a2cb376?e=1620644132&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:xr5A_Gh-OLtrR9MAbpUIofrkEFo="},"children":[{"parent":"fa5f4735e999","image":{"w":609,"h":361,"url":"http://cdn2.processon.com/60990358e4b053dd7b9eb95c?e=1620644201&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:QDT85qMhKLvRKbRD94Af53wk5XI="},"children":[],"id":"a82ac8ab8f5e","title":"子主题"}],"id":"fa5f4735e999","title":"子主题"}],"id":"783616b4b7c9","title":"B树插入（注意结点分裂和带来的连锁分裂的效果）"},{"parent":"6078f99e5683","children":[{"parent":"94e82f980f61","image":{"w":900,"h":465.96356663470755,"url":"http://cdn2.processon.com/6099040ee4b0454b715f0fcc?e=1620644382&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:ArtJeWyFQFnzpwWZTWzWclFOWws="},"children":[{"parent":"2a7ea3115156","image":{"w":900,"h":437.90786948176583,"url":"http://cdn2.processon.com/6099048ee4b0d7221440c49d?e=1620644511&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:0HOc7PkgURraNWVZg6NAL5Jvsss="},"children":[],"id":"63c4ea530bb0","title":"子主题"}],"id":"2a7ea3115156","title":"子主题"}],"id":"94e82f980f61","title":"b树删除"},{"parent":"6078f99e5683","children":[{"parent":"f7467721a6ba","children":[{"parent":"0160af45d74b","children":[],"id":"fdc92b12e4e0","title":"特点：<br>1. 具有n个关键字的结点只含有n棵子树<br>2. 关键字n的范围是 m/2 &lt;= n &lt;= m, 对于b树则需要减去1<br>3. 叶结点包含信息，非叶结点仅起到索引作用，索引只含有对应子树的最大关键字和指向该子树的指针，不含有该关键字对应记录的存储地址。再B树中每个关键字对应一个记录的存储地址。<br>4，有一个指针指向关键字最小的叶子节点，所有叶子结点链接成一个单链表。"}],"id":"0160af45d74b","title":"高效的平衡查找树"},{"parent":"f7467721a6ba","children":[{"parent":"6cfff41a627e","image":{"w":732,"h":366,"url":"http://cdn2.processon.com/60990bc1e4b053dd7b9ecd1e?e=1620646353&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:QjCtWSmGSrvE_RWAYVC9SNKjpcg="},"children":[{"parent":"a0592fe4ba84","image":{"w":567,"h":370,"url":"http://cdn2.processon.com/60990be5e4b0bd406b38ee7a?e=1620646390&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:KQD9ydPwdqQxn_ls66JYNrhYWWU="},"children":[],"id":"ec92830f1639","title":"B+ 树样例"}],"id":"a0592fe4ba84","title":"B树样例"}],"id":"6cfff41a627e","title":"为什么常用在数据库：<br>1. 二叉查找树比顺序查找要快<br>2. 平衡二叉树比普通二叉树要块<br>3. B树：单个结点可以存储多个键值和数据的平衡树<br>4. <br>4.1.&nbsp;B+树非叶子节点上是不存储数据的，仅存储键值，而B树节点中不仅存储键值，也会存储数据。之所以这么做是因为在数据库中页的大小是固定的，innodb中页的默认大小是16KB。如果不存储数据，那么就会存储更多的键值，相应的树的阶数（节点的子节点树）就会更大，树就会更矮更胖，如此一来我们查找数据进行磁盘的IO次数有会再次减少，数据查询的效率也会更快。<br><br>另外，B+树的阶数是等于键值的数量的，如果我们的B+树一个节点可以存储1000个键值，那么3层B+树可以存储1000×1000×1000=10亿个数据。一般根节点是常驻内存的，所以一般我们查找10亿数据，只需要2次磁盘IO。&nbsp;<br><br>4.2.&nbsp;因为B+树索引的所有数据均存储在叶子节点，而且数据是按照顺序排列的。那么B+树使得范围查找，排序查找，分组查找以及去重查找变得异常简单。而B树因为数据分散在各个节点，要实现这一点是很不容易的。&nbsp;&nbsp;<br><br>有心的读者可能还发现上图B+树中各个页之间是通过双向链表连接的，叶子节点中的数据是通过单向链表连接的。<br><br>其实上面的B树我们也可以对各个节点加上链表。其实这些不是它们之前的区别，是因为在mysql的innodb存储引擎中，索引就是这样存储的。也就是说上图中的B+树索引就是innodb中B+树索引真正的实现方式，准确的说应该是聚集索引（聚集索引和非聚集索引下面会讲到）。"}],"id":"f7467721a6ba","title":"B+ 树"}],"id":"6078f99e5683","title":"B-树、B+树"},{"parent":"6d937ce89033","children":[{"parent":"bb0c6f6a9c0e","children":[{"parent":"305c7953b2ca","children":[{"parent":"260682c957b8","children":[],"id":"270e71ade779","title":"取关键字或者关键字的某个线性函数值作为哈希地址,即H(Key)=Key或者H(Key)=a*Key+b(a,b为整数),这种散列函数也叫做自身函数.如果H(Key)的哈希地址上已经有值了,那么就往下一个位置找,知道找到H(Key)的位置没有值了就把元素放进去."}],"id":"260682c957b8","title":"直接地址法"},{"parent":"305c7953b2ca","children":[{"parent":"153aa69bedbb","children":[],"id":"34ce538d9f31","title":"取关键字被某个不大于散列表表长m的数p除后所得的余数为散列地址.即H(Key)=Key&nbsp;MOD&nbsp;p,p&lt;=m.不仅可以对关键字直接取模,也可在折叠、平方取中等运算之后取模。对p的选择很重要，一般取素数或m，若p选得不好，则很容易产生冲突。一般p取值为表的长度tableSize。"}],"id":"153aa69bedbb","title":"除留余数法"},{"parent":"305c7953b2ca","children":[{"parent":"5afc644116f4","children":[],"id":"c3ad0f3aba3a","title":"分析一组数据,比如一组员工的出生年月,这时我们发现出生年月的前几位数字一般都相同,因此,出现冲突的概率就会很大,但是我们发现年月日的后几位表示月份和具体日期的数字差别很大,如果利用后面的几位数字来构造散列地址,则冲突的几率则会明显降低.因此数字分析法就是找出数字的规律,尽可能利用这些数据来构造冲突几率较低的散列地址.<br>"}],"id":"5afc644116f4","title":"数字分析法"},{"parent":"305c7953b2ca","children":[{"parent":"3f7b60214b17","children":[],"id":"a44713131352","title":"取关键字平方后的中间几位作为散列地址.一个数的平方值的中间几位和数的每一位都有关。因此，有平方取中法得到的哈希地址同关键字的每一位都有关，是的哈希地址具有较好的分散性。该方法适用于关键字中的每一位取值都不够分散或者较分散的位数小于哈希地址所需要的位数的情况。"}],"id":"3f7b60214b17","title":"平方取中法"},{"parent":"305c7953b2ca","children":[{"parent":"fb360bdc8963","children":[],"id":"e8616e6c7d02","title":"折叠法即将关键字分割成位数相同的几部分,最后一部分位数可以不同,然后取这几部分的叠加和(注意:叠加和时去除进位)作为散列地址.数位叠加可以有移位叠加和间界叠加两种方法.移位叠加是将分割后的每一部分的最低位对齐,然后相加;间界叠加是从一端向另一端沿分割界来回折叠,然后对齐相加."}],"id":"fb360bdc8963","title":"折叠法"},{"parent":"305c7953b2ca","children":[{"parent":"3b8080955fef","children":[],"id":"1eb8dc424026","title":"选择一个随机数,去关键字的随机值作为散列地址,通常用于关键字长度不同的场合."}],"id":"3b8080955fef","title":"随机数法"}],"id":"305c7953b2ca","title":"哈希函数"},{"parent":"bb0c6f6a9c0e","children":[{"parent":"8216e6f38875","children":[],"id":"c8b493e06ecb","title":"开放定址法：线性探测法：每一个地址，都对所有元素是开放的。遇到哈希冲突，就取下一个空地址；平方探测法 +1、+4、+9、+16 ...."},{"parent":"8216e6f38875","children":[{"parent":"125f4f8ebef4","children":[],"id":"459e2e55dbb4","title":"将所有哈希地址为i的元素构成一个称为同义词链的单链表，并将单链表的头指针存在哈希表的第i个单元中，因而查找、插入和删除主要在同义词链中进行。链地址法适用于经常进行插入和删除的情况。"}],"id":"125f4f8ebef4","title":"链地址法（封闭地址）"},{"parent":"8216e6f38875","children":[{"parent":"0e12fc66ed0b","children":[],"id":"3dd0bf92bacf","title":"将哈希表分为基本表和溢出表两部分，凡是和基本表发生冲突的元素，一律填入溢出表。"}],"id":"0e12fc66ed0b","title":"公共溢出区法"},{"parent":"8216e6f38875","children":[],"id":"98c9ec547def","title":"再哈希法"}],"id":"8216e6f38875","title":"解决冲突"},{"parent":"bb0c6f6a9c0e","children":[],"id":"ad1140bb5522","title":"哈希表(Hash&nbsp;Table)也叫散列表，是根据关键码值（Key&nbsp;Value）而直接进行访问的数据结构。它通过把关键码值映射到哈希表中的一个位置来访问记录，以加快查找的速度。这个映射函数就做散列函数，存放记录的数组叫做散列表。"}],"id":"bb0c6f6a9c0e","title":"哈希表查找（空间换时间）"}],"id":"6d937ce89033","title":"动态"}],"id":"ae52be9f326d","title":"查找表"},{"parent":"4158153195da","children":[{"parent":"ba85076c56e5","children":[],"id":"94d35aee1e0d","title":"给定值与关键字值的比较次数的期望值"}],"id":"ba85076c56e5","title":"平均查找长度ASL"}],"id":"4158153195da","title":"查找"}],"root":true,"theme":"customise_0e596bc1fced","id":"root","title":"数据结构","structure":"mind_free"}},"meta":{"exportTime":"2021-05-10 19:22:30","member":"","diagramInfo":{"creator":"","created":"","modified":"","title":"","category":""},"id":"","type":"ProcessOn Schema File","version":"1.0"}}