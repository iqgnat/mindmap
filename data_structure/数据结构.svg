<?xml version="1.0" standalone="no"?><?xml-stylesheet type="text/css" href="https://www.processon.com/themes/default/mind/icons/icons.css" ?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" id="mind-svg-view-con" version="1.1" width="3028.328125px" height="12250px"><defs></defs><g id="svgbackgroundid"><defs></defs><rect x="0" y="0" width="3028.328125" height="12250" fill="#ffffff"></rect></g><g transform="translate(-9905, -3875)" id="sdjakdjak9"><defs></defs><g class="svg-topic-con" transform="translate(0.5,0.5)"><path part="right" sub="true" id="line_32ab6a28625f" d="M 9999.99953326057 9999.500229779413 C 9999.99953326057 9999.500229779413 10009.99953326057 4114 10144.99953326057 4114" stroke="#000000" fill="none" stroke-width="3"></path><path part="right" sub="true" id="line_b0d629516b24" d="M 9999.99953326057 9999.500229779413 C 9999.99953326057 9999.500229779413 10009.99953326057 4724.000459558823 10144.99953326057 4724.000459558823" stroke="#000000" fill="none" stroke-width="3"></path><path part="right" sub="true" id="line_e3399a1e874b" d="M 9999.99953326057 9999.500229779413 C 9999.99953326057 9999.500229779413 10009.99953326057 5557.5 10144.99953326057 5557.5" stroke="#000000" fill="none" stroke-width="3"></path><path part="right" sub="true" id="line_6846c4174724" d="M 9999.99953326057 9999.500229779413 C 9999.99953326057 9999.500229779413 10009.99953326057 6492.000689338235 10144.99953326057 6492.000689338235" stroke="#000000" fill="none" stroke-width="3"></path><path part="right" sub="true" id="line_d59f472a9fc3" d="M 9999.99953326057 9999.500229779413 C 9999.99953326057 9999.500229779413 10009.99953326057 8253.000459558823 10144.99953326057 8253.000459558823" stroke="#000000" fill="none" stroke-width="3"></path><path part="right" sub="true" id="line_3de94eb231c9" d="M 9999.99953326057 9999.500229779413 C 9999.99953326057 9999.500229779413 10009.99953326057 9894.500344669117 10144.99953326057 9894.500344669117" stroke="#000000" fill="none" stroke-width="3"></path><path part="right" sub="true" id="line_6c6b113a34ac" d="M 9999.99953326057 9999.500229779413 C 9999.99953326057 9999.500229779413 10009.99953326057 10707.000229779413 10144.99953326057 10707.000229779413" stroke="#000000" fill="none" stroke-width="3"></path><path part="right" sub="true" id="line_4158153195da" d="M 9999.99953326057 9999.500229779413 C 9999.99953326057 9999.500229779413 10009.99953326057 13629.000344669117 10144.99953326057 13629.000344669117" stroke="#000000" fill="none" stroke-width="3"></path></g><g class="svg-connection-con" transform="translate(0.5,0.5)"></g><g class="svg-freesums-con" transform="translate(0.5,0.5)"></g></g><g id="4158153195da"><rect x="240" y="9732.625" rx="5px" ry="5px" width="54" height="42" style="fill: #e5e5e5; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="15px" font-weight="normal" fill="rgb(0, 0, 0)"><tspan x="252" y="9759.078125"><tspan>查找</tspan></tspan></text></g></g><g id="ae52be9f326d"><rect x="322" y="9725.125" rx="1px" ry="1px" width="60" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="331" y="9742.259375"><tspan>查找表</tspan></tspan></text></g></g><g id="e20f797c811f"><rect x="410" y="7485.734375" rx="1px" ry="1px" width="46" height="24" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="419" y="7502.86875"><tspan>静态</tspan></tspan></text></g></g><g id="55444486ebd1"><rect x="484" y="7288" rx="1px" ry="1px" width="74" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="493" y="7305.134375"><tspan>顺序查找</tspan></tspan></text></g></g><g id="1477ef716662"><rect x="484" y="7320.734375" rx="1px" ry="1px" width="74" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="493" y="7337.86875"><tspan>二分查找</tspan></tspan></text></g></g><g id="0091f84c2821"><rect x="484" y="7518.46875" rx="1px" ry="1px" width="158" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="493" y="7535.603125"><tspan>分块查找（索引查找）</tspan></tspan></text></g></g><g id="da1199d32e03"><rect x="670" y="7353.46875" rx="1px" ry="1px" width="379" height="267" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="679" y="7612.603125"><tspan>块间有序、块内无序</tspan></tspan></text></g><image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://cdn2.processon.com/6098f08fe4b01cae7c776963?e=1620639392&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:nZNuj5gNczuQwX4m2E-cYOqaZfg=" transform="translate(679, 7355.46875)" width="361" height="234"></image></g><g id="dcc72cdc5e45"><rect x="670" y="7628.203125" rx="1px" ry="1px" width="452" height="80" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="679" y="7643.603125"><tspan>特点：</tspan></tspan><tspan x="679" y="7662.603125"><tspan>优点：插入和删除比较容易，无需进行大量移动</tspan></tspan><tspan x="679" y="7681.603125"><tspan>缺点： 要增加一个索引表的存储空间并堆初始索引表进行排序运算</tspan></tspan><tspan x="679" y="7700.603125"><tspan>适用情况：如果线性表既要快速查找又经常动态变化，则可用分块查找</tspan></tspan></text></g></g><g id="6d937ce89033"><rect x="410" y="9939.21875" rx="1px" ry="1px" width="46" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="419" y="9956.353125"><tspan>动态</tspan></tspan></text></g></g><g id="d92c23936e28"><rect x="484" y="8219.046875" rx="1px" ry="1px" width="88" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="493" y="8236.18125"><tspan>二叉排序树</tspan></tspan></text></g></g><g id="dd4dd48f1c6e"><rect x="600" y="7823.203125" rx="1px" ry="1px" width="116" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="609" y="7840.3375"><tspan>二叉排序树查找</tspan></tspan></text></g></g><g id="32155b058787"><rect x="744" y="7716.203125" rx="1px" ry="1px" width="232" height="239" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="753" y="7947.3375"><tspan>样例</tspan></tspan></text></g><image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://cdn2.processon.com/6098f1dfe4b07df1031f9bb5?e=1620639728&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:koflrK_tbSiAgQU0LuvPBJ3ARv0=" transform="translate(753, 7718.203125)" width="214" height="206"></image></g><g id="d016667d5f54"><rect x="600" y="7962.9375" rx="1px" ry="1px" width="116" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="609" y="7980.071875"><tspan>二叉排序树插入</tspan></tspan></text></g></g><g id="cea2ebca7f02"><rect x="600" y="7995.671875" rx="1px" ry="1px" width="116" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="609" y="8012.80625"><tspan>二叉排序树创建</tspan></tspan></text></g></g><g id="1b7f6c64ef27"><rect x="600" y="8375.140625" rx="1px" ry="1px" width="116" height="24" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="609" y="8392.275"><tspan>二叉排序树删除</tspan></tspan></text></g></g><g id="0937ef432e05"><rect x="744" y="8028.40625" rx="1px" ry="1px" width="440" height="293" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="753" y="8313.540625"><tspan>左右子树非空， 有两种方法</tspan></tspan></text></g><image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://cdn2.processon.com/6098f3a1e4b053dd7b9e858c?e=1620640177&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:j-xHpoqyOIkeB1HbZARm8PcvnXc=" transform="translate(753, 8030.40625)" width="422" height="260"></image></g><g id="d69c25973033"><rect x="744" y="8329.140625" rx="1px" ry="1px" width="485" height="198" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="753" y="8519.275"><tspan>方法二</tspan></tspan></text></g><image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://cdn2.processon.com/6098f43be4b0aff79a2c8354?e=1620640331&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:igAEL0bFiG09MvAs5IvECslFMzU=" transform="translate(753, 8331.140625)" width="467" height="165"></image></g><g id="2f3e30ae1dd5"><rect x="744" y="8534.875" rx="1px" ry="1px" width="488" height="212" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="753" y="8739.009375"><tspan>方法一</tspan></tspan></text></g><image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://cdn2.processon.com/6098f45ee4b0d722144095e8?e=1620640367&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:L_eFGX1fYr-HwjxqH2RME20rVVw=" transform="translate(753, 8536.875)" width="470" height="179"></image></g><g id="25b268071411"><rect x="484" y="8843.484375" rx="1px" ry="1px" width="88" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="493" y="8860.61875"><tspan>平衡二叉树</tspan></tspan></text></g></g><g id="66bbfbeea632"><rect x="600" y="8754.609375" rx="1px" ry="1px" width="503" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="609" y="8771.74375"><tspan>平衡二叉树在插入节点和删除节点等动态操作上增加了自平衡的操作(通过旋转)</tspan></tspan></text></g></g><g id="05c88080b391"><rect x="600" y="8787.34375" rx="1px" ry="1px" width="572" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="609" y="8804.478125"><tspan>是二叉排序树的改进版本：左右子树深度之差的绝对值小于2，并左右子树均为平衡二叉树</tspan></tspan></text></g></g><g id="fffec639181e"><rect x="600" y="8820.078125" rx="1px" ry="1px" width="550" height="137" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="609" y="8835.478125"><tspan>1.二叉排序树的定义：</tspan></tspan><tspan x="609" y="8854.478125"><tspan>某结点左子树的所有结点的值都小于该节点的值且该结点右子树的值都大于该节点的值</tspan></tspan><tspan x="609" y="8873.478125"><tspan>2.平衡二叉树是特殊的二叉排序树</tspan></tspan><tspan x="609" y="8892.478125"><tspan>3.平衡因子：左子树高度－右子树高度</tspan></tspan><tspan x="609" y="8911.478125"><tspan>4.平衡二叉树必须满足以下两个条件：</tspan></tspan><tspan x="609" y="8930.478125"><tspan>1.必须是二叉排序树</tspan></tspan><tspan x="609" y="8949.478125"><tspan>2.平衡因子的绝对值小于等于1</tspan></tspan></text></g></g><g id="6078f99e5683"><rect x="484" y="10304.1875" rx="1px" ry="1px" width="94" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="493" y="10321.321875"><tspan>B-树、B+树</tspan></tspan></text></g></g><g id="0ff1ccb6c6b9"><rect x="606.015625" y="9138.71875" rx="1px" ry="1px" width="244" height="24" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="615.015625" y="9155.853125"><tspan>多路查找树，举例 2-3 树，2-3-4 树</tspan></tspan></text></g></g><g id="9614e7e773d8"><rect x="877.671875" y="8965.078125" rx="1px" ry="1px" width="690" height="372" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"></text></g><image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://cdn2.processon.com/6098fdf9e4b0a89ba5e3b658?e=1620642826&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:ImeV0WllGFGMVOoZLAaNGtNh-bo=" transform="translate(886.671875, 8967.078125)" width="672" height="341"></image></g><g id="49540942f1c3"><rect x="606.015625" y="9345.078125" rx="1px" ry="1px" width="781" height="304" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="615.015625" y="9622.478125"><tspan>性质： </tspan></tspan><tspan x="615.015625" y="9641.478125"><tspan> </tspan></tspan></text></g><image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://cdn2.processon.com/6098fe7be4b07df1031fc7c8?e=1620642955&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:R2w_n9muriiiMf5GPpiAIFOImZ8=" transform="translate(615.015625, 9347.078125)" width="763" height="254"></image></g><g id="22415dcd7205"><rect x="606.015625" y="9657.078125" rx="1px" ry="1px" width="918" height="470" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="615.015625" y="10119.275"><tspan>B树查找过程：</tspan></tspan></text></g><image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://cdn2.processon.com/6098ff87e4b0976f0e02f086?e=1620643226&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:qzVEyWodms125btjTJPsbb52IFA=" transform="translate(615.015625, 9659.078125)" width="900" height="437"></image></g><g id="783616b4b7c9"><rect x="606.015625" y="10367.375" rx="1px" ry="1px" width="335" height="24" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="615.015625" y="10384.509375"><tspan>B树插入（注意结点分裂和带来的连锁分裂的效果）</tspan></tspan></text></g></g><g id="fa5f4735e999"><rect x="968.8125" y="10134.875" rx="1px" ry="1px" width="686" height="490" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="977.8125" y="10617.009375"><tspan>子主题</tspan></tspan></text></g><image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://cdn2.processon.com/60990313e4b0aff79a2cb376?e=1620644132&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:xr5A_Gh-OLtrR9MAbpUIofrkEFo=" transform="translate(977.8125, 10136.875)" width="668" height="457"></image></g><g id="a82ac8ab8f5e"><rect x="1682.8125" y="10182.875" rx="1px" ry="1px" width="627" height="394" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="1691.8125" y="10569.009375"><tspan>子主题</tspan></tspan></text></g><image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://cdn2.processon.com/60990358e4b053dd7b9eb95c?e=1620644201&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:QDT85qMhKLvRKbRD94Af53wk5XI=" transform="translate(1691.8125, 10184.875)" width="609" height="361"></image></g><g id="94e82f980f61"><rect x="606.015625" y="10869.59375" rx="1px" ry="1px" width="69" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="615.015625" y="10886.728125"><tspan>b树删除</tspan></tspan></text></g></g><g id="2a7ea3115156"><rect x="702.96875" y="10632.609375" rx="1px" ry="1px" width="918" height="499" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="711.96875" y="11123.696875"><tspan>子主题</tspan></tspan></text></g><image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://cdn2.processon.com/6099040ee4b0454b715f0fcc?e=1620644382&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:ArtJeWyFQFnzpwWZTWzWclFOWws=" transform="translate(711.96875, 10634.609375)" width="900" height="466"></image></g><g id="63c4ea530bb0"><rect x="1648.96875" y="10646.640625" rx="1px" ry="1px" width="918" height="471" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="1657.96875" y="11109.68125"><tspan>子主题</tspan></tspan></text></g><image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://cdn2.processon.com/6099048ee4b0d7221440c49d?e=1620644511&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:0HOc7PkgURraNWVZg6NAL5Jvsss=" transform="translate(1657.96875, 10648.640625)" width="900" height="438"></image></g><g id="f7467721a6ba"><rect x="606.015625" y="11391.296875" rx="1px" ry="1px" width="55" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="615.015625" y="11408.43125"><tspan>B+ 树</tspan></tspan></text></g></g><g id="0160af45d74b"><rect x="689.328125" y="11185.9375" rx="1px" ry="1px" width="130" height="24" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="698.328125" y="11203.071875"><tspan>高效的平衡查找树</tspan></tspan></text></g></g><g id="fdc92b12e4e0"><rect x="847.328125" y="11139.296875" rx="1px" ry="1px" width="918" height="118" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="856.328125" y="11154.696875"><tspan>特点：</tspan></tspan><tspan x="856.328125" y="11173.696875"><tspan>1. 具有n个关键字的结点只含有n棵子树</tspan></tspan><tspan x="856.328125" y="11192.696875"><tspan>2. 关键字n的范围是 m/2 &lt;= n &lt;= m, 对于b树则需要减去1</tspan></tspan><tspan x="856.328125" y="11211.696875"><tspan>3. 叶结点包含信息，非叶结点仅起到索引作用，索引只含有对应子树的最大关键字和指向该子树的指针，不含有该关键字对应记录的存储地址。再</tspan></tspan><tspan x="856.328125" y="11230.696875"><tspan>B树中每个关键字对应一个记录的存储地址。</tspan></tspan><tspan x="856.328125" y="11249.696875"><tspan>4，有一个指针指向关键字最小的叶子节点，所有叶子结点链接成一个单链表。</tspan></tspan></text></g></g><g id="6cfff41a627e"><rect x="689.328125" y="11284.15625" rx="1px" ry="1px" width="918" height="365" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="698.328125" y="11299.55625"><tspan>为什么常用在数据库：</tspan></tspan><tspan x="698.328125" y="11318.55625"><tspan>1. 二叉查找树比顺序查找要快</tspan></tspan><tspan x="698.328125" y="11337.55625"><tspan>2. 平衡二叉树比普通二叉树要块</tspan></tspan><tspan x="698.328125" y="11356.55625"><tspan>3. B树：单个结点可以存储多个键值和数据的平衡树</tspan></tspan><tspan x="698.328125" y="11375.55625"><tspan>4. </tspan></tspan><tspan x="698.328125" y="11394.55625"><tspan>4.1. B+树非叶子节点上是不存储数据的，仅存储键值，而B树节点中不仅存储键值，也会存储数据。之所以这么做是因为在数据库中页的大小是固</tspan></tspan><tspan x="698.328125" y="11413.55625"><tspan>定的，innodb中页的默认大小是16KB。如果不存储数据，那么就会存储更多的键值，相应的树的阶数（节点的子节点树）就会更大，树就会更矮</tspan></tspan><tspan x="698.328125" y="11432.55625"><tspan>更胖，如此一来我们查找数据进行磁盘的IO次数有会再次减少，数据查询的效率也会更快。</tspan></tspan><tspan x="698.328125" y="11451.55625"><tspan> </tspan></tspan><tspan x="698.328125" y="11470.55625"><tspan>另外，B+树的阶数是等于键值的数量的，如果我们的B+树一个节点可以存储1000个键值，那么3层B+树可以存储1000×1000×1000=10亿个数</tspan></tspan><tspan x="698.328125" y="11489.55625"><tspan>据。一般根节点是常驻内存的，所以一般我们查找10亿数据，只需要2次磁盘IO。 </tspan></tspan><tspan x="698.328125" y="11508.55625"><tspan> </tspan></tspan><tspan x="698.328125" y="11527.55625"><tspan>4.2. 因为B+树索引的所有数据均存储在叶子节点，而且数据是按照顺序排列的。那么B+树使得范围查找，排序查找，分组查找以及去重查找变得</tspan></tspan><tspan x="698.328125" y="11546.55625"><tspan>异常简单。而B树因为数据分散在各个节点，要实现这一点是很不容易的。  </tspan></tspan><tspan x="698.328125" y="11565.55625"><tspan> </tspan></tspan><tspan x="698.328125" y="11584.55625"><tspan>有心的读者可能还发现上图B+树中各个页之间是通过双向链表连接的，叶子节点中的数据是通过单向链表连接的。</tspan></tspan><tspan x="698.328125" y="11603.55625"><tspan> </tspan></tspan><tspan x="698.328125" y="11622.55625"><tspan>其实上面的B树我们也可以对各个节点加上链表。其实这些不是它们之前的区别，是因为在mysql的innodb存储引擎中，索引就是这样存储的。也</tspan></tspan><tspan x="698.328125" y="11641.55625"><tspan>就是说上图中的B+树索引就是innodb中B+树索引真正的实现方式，准确的说应该是聚集索引（聚集索引和非聚集索引下面会讲到）。</tspan></tspan></text></g></g><g id="a0592fe4ba84"><rect x="1635.328125" y="11267.296875" rx="1px" ry="1px" width="750" height="399" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="1644.328125" y="11658.43125"><tspan>B树样例</tspan></tspan></text></g><image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://cdn2.processon.com/60990bc1e4b053dd7b9ecd1e?e=1620646353&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:QjCtWSmGSrvE_RWAYVC9SNKjpcg=" transform="translate(1644.328125, 11269.296875)" width="732" height="366"></image></g><g id="ec92830f1639"><rect x="2413.328125" y="11265.296875" rx="1px" ry="1px" width="585" height="403" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="2422.328125" y="11660.43125"><tspan>B+ 树样例</tspan></tspan></text></g><image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://cdn2.processon.com/60990be5e4b0bd406b38ee7a?e=1620646390&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:KQD9ydPwdqQxn_ls66JYNrhYWWU=" transform="translate(2422.328125, 11267.296875)" width="567" height="370"></image></g><g id="bb0c6f6a9c0e"><rect x="484" y="11919.140625" rx="1px" ry="1px" width="186" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="493" y="11936.275"><tspan>哈希表查找（空间换时间）</tspan></tspan></text></g></g><g id="305c7953b2ca"><rect x="698" y="11820.03125" rx="1px" ry="1px" width="74" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="707" y="11837.165625"><tspan>哈希函数</tspan></tspan></text></g></g><g id="260682c957b8"><rect x="800" y="11684.671875" rx="1px" ry="1px" width="88" height="24" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="809" y="11701.80625"><tspan>直接地址法</tspan></tspan></text></g></g><g id="270e71ade779"><rect x="916" y="11676.03125" rx="1px" ry="1px" width="918" height="42" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="925" y="11691.43125"><tspan>取关键字或者关键字的某个线性函数值作为哈希地址,即H(Key)=Key或者H(Key)=a*Key+b(a,b为整数),这种散列函数也叫做自身函数.如果H(Key)</tspan></tspan><tspan x="925" y="11710.43125"><tspan>的哈希地址上已经有值了,那么就往下一个位置找,知道找到H(Key)的位置没有值了就把元素放进去.</tspan></tspan></text></g></g><g id="153aa69bedbb"><rect x="800" y="11734.671875" rx="1px" ry="1px" width="88" height="24" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="809" y="11751.80625"><tspan>除留余数法</tspan></tspan></text></g></g><g id="34ce538d9f31"><rect x="916" y="11726.03125" rx="1px" ry="1px" width="918" height="42" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="925" y="11741.43125"><tspan>取关键字被某个不大于散列表表长m的数p除后所得的余数为散列地址.即H(Key)=Key MOD p,p&lt;=m.不仅可以对关键字直接取模,也可在折叠、平</tspan></tspan><tspan x="925" y="11760.43125"><tspan>方取中等运算之后取模。对p的选择很重要，一般取素数或m，若p选得不好，则很容易产生冲突。一般p取值为表的长度tableSize。</tspan></tspan></text></g></g><g id="5afc644116f4"><rect x="800" y="11794.171875" rx="1px" ry="1px" width="88" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="809" y="11811.30625"><tspan>数字分析法</tspan></tspan></text></g></g><g id="c3ad0f3aba3a"><rect x="916" y="11776.03125" rx="1px" ry="1px" width="918" height="61" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="925" y="11791.43125"><tspan>分析一组数据,比如一组员工的出生年月,这时我们发现出生年月的前几位数字一般都相同,因此,出现冲突的概率就会很大,但是我们发现年月日的后几</tspan></tspan><tspan x="925" y="11810.43125"><tspan>位表示月份和具体日期的数字差别很大,如果利用后面的几位数字来构造散列地址,则冲突的几率则会明显降低.因此数字分析法就是找出数字的规律,</tspan></tspan><tspan x="925" y="11829.43125"><tspan>尽可能利用这些数据来构造冲突几率较低的散列地址.</tspan></tspan></text></g></g><g id="3f7b60214b17"><rect x="800" y="11853.671875" rx="1px" ry="1px" width="88" height="24" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="809" y="11870.80625"><tspan>平方取中法</tspan></tspan></text></g></g><g id="a44713131352"><rect x="916" y="11845.03125" rx="1px" ry="1px" width="918" height="42" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="925" y="11860.43125"><tspan>取关键字平方后的中间几位作为散列地址.一个数的平方值的中间几位和数的每一位都有关。因此，有平方取中法得到的哈希地址同关键字的每一位</tspan></tspan><tspan x="925" y="11879.43125"><tspan>都有关，是的哈希地址具有较好的分散性。该方法适用于关键字中的每一位取值都不够分散或者较分散的位数小于哈希地址所需要的位数的情况。</tspan></tspan></text></g></g><g id="fb360bdc8963"><rect x="800" y="11913.171875" rx="1px" ry="1px" width="60" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="809" y="11930.30625"><tspan>折叠法</tspan></tspan></text></g></g><g id="e8616e6c7d02"><rect x="888" y="11895.03125" rx="1px" ry="1px" width="918" height="61" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="897" y="11910.43125"><tspan>折叠法即将关键字分割成位数相同的几部分,最后一部分位数可以不同,然后取这几部分的叠加和(注意:叠加和时去除进位)作为散列地址.数位叠加可</tspan></tspan><tspan x="897" y="11929.43125"><tspan>以有移位叠加和间界叠加两种方法.移位叠加是将分割后的每一部分的最低位对齐,然后相加;间界叠加是从一端向另一端沿分割界来回折叠,然后对齐</tspan></tspan><tspan x="897" y="11948.43125"><tspan>相加.</tspan></tspan></text></g></g><g id="3b8080955fef"><rect x="800" y="11964.03125" rx="1px" ry="1px" width="74" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="809" y="11981.165625"><tspan>随机数法</tspan></tspan></text></g></g><g id="1eb8dc424026"><rect x="902" y="11964.03125" rx="1px" ry="1px" width="518" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="911" y="11981.165625"><tspan>选择一个随机数,去关键字的随机值作为散列地址,通常用于关键字长度不同的场合.</tspan></tspan></text></g></g><g id="8216e6f38875"><rect x="698" y="12054.5" rx="1px" ry="1px" width="74" height="24" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="707" y="12071.634375"><tspan>解决冲突</tspan></tspan></text></g></g><g id="c8b493e06ecb"><rect x="800" y="11996.765625" rx="1px" ry="1px" width="864" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="809" y="12013.9"><tspan>开放定址法：线性探测法：每一个地址，都对所有元素是开放的。遇到哈希冲突，就取下一个空地址；平方探测法 +1、+4、+9、+16 ....</tspan></tspan></text></g></g><g id="125f4f8ebef4"><rect x="800" y="12038.140625" rx="1px" ry="1px" width="158" height="24" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="809" y="12055.275"><tspan>链地址法（封闭地址）</tspan></tspan></text></g></g><g id="459e2e55dbb4"><rect x="986" y="12029.5" rx="1px" ry="1px" width="918" height="42" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="995" y="12044.9"><tspan>将所有哈希地址为i的元素构成一个称为同义词链的单链表，并将单链表的头指针存在哈希表的第i个单元中，因而查找、插入和删除主要在同义词</tspan></tspan><tspan x="995" y="12063.9"><tspan>链中进行。链地址法适用于经常进行插入和删除的情况。</tspan></tspan></text></g></g><g id="0e12fc66ed0b"><rect x="800" y="12079.5" rx="1px" ry="1px" width="102" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="809" y="12096.634375"><tspan>公共溢出区法</tspan></tspan></text></g></g><g id="3dd0bf92bacf"><rect x="930" y="12079.5" rx="1px" ry="1px" width="564" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="939" y="12096.634375"><tspan>将哈希表分为基本表和溢出表两部分，凡是和基本表发生冲突的元素，一律填入溢出表。</tspan></tspan></text></g></g><g id="98c9ec547def"><rect x="800" y="12112.234375" rx="1px" ry="1px" width="74" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="809" y="12129.36875"><tspan>再哈希法</tspan></tspan></text></g></g><g id="ad1140bb5522"><rect x="698" y="12144.96875" rx="1px" ry="1px" width="918" height="42" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="707" y="12160.36875"><tspan>哈希表(Hash Table)也叫散列表，是根据关键码值（Key Value）而直接进行访问的数据结构。它通过把关键码值映射到哈希表中的一个位置来访</tspan></tspan><tspan x="707" y="12179.36875"><tspan>问记录，以加快查找的速度。这个映射函数就做散列函数，存放记录的数组叫做散列表。</tspan></tspan></text></g></g><g id="ba85076c56e5"><rect x="322" y="12194.96875" rx="1px" ry="1px" width="127" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="331" y="12212.103125"><tspan>平均查找长度ASL</tspan></tspan></text></g></g><g id="94d35aee1e0d"><rect x="477.125" y="12194.96875" rx="1px" ry="1px" width="256" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="486.125" y="12212.103125"><tspan>给定值与关键字值的比较次数的期望值</tspan></tspan></text></g></g><g id="6c6b113a34ac"><rect x="240" y="6810.953125" rx="5px" ry="5px" width="54" height="42" style="fill: #e5e5e5; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="15px" font-weight="normal" fill="rgb(0, 0, 0)"><tspan x="252" y="6837.40625"><tspan>排序</tspan></tspan></text></g></g><g id="9a2bb3419444"><rect x="322" y="6402" rx="1px" ry="1px" width="172" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="331" y="6419.134375"><tspan>插入排序（扑克牌整理）</tspan></tspan></text></g></g><g id="cce00ba508ba"><rect x="322" y="6434.734375" rx="1px" ry="1px" width="376" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="331" y="6451.86875"><tspan>希尔排序：每次将增量缩小一半，最后一个增量值必须为1</tspan></tspan></text></g></g><g id="1b39e2a11e2c"><rect x="322" y="6483.84375" rx="1px" ry="1px" width="74" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="331" y="6500.978125"><tspan>交换排序</tspan></tspan></text></g></g><g id="33fa3ac69e2b"><rect x="424" y="6467.46875" rx="1px" ry="1px" width="214" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="433" y="6484.603125"><tspan>冒泡排序（从左到右两两比较）</tspan></tspan></text></g></g><g id="6e226f00951c"><rect x="424" y="6500.203125" rx="1px" ry="1px" width="206" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="433" y="6517.3375"><tspan>快速排序（选择pivot，迭代）</tspan></tspan></text></g></g><g id="fd3bb0718342"><rect x="322" y="6532.9375" rx="1px" ry="1px" width="284" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="331" y="6550.071875"><tspan>选择排序（每次选择最大的元素放在最后）</tspan></tspan></text></g></g><g id="d93fd253d90f"><rect x="322" y="6651.3125" rx="1px" ry="1px" width="60" height="24" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="331" y="6668.446875"><tspan>堆排序</tspan></tspan></text></g></g><g id="805462badf04"><rect x="410" y="6565.671875" rx="1px" ry="1px" width="389" height="196" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"></text></g><image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://cdn2.processon.com/6098d36be4b0ea2d1a98da18?e=1620631931&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:IPqfYcWBprwTQBGzfJbDu43qvM4=" transform="translate(419, 6567.671875)" width="371" height="165"></image></g><g id="56227459d414"><rect x="322" y="6769.671875" rx="1px" ry="1px" width="74" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="331" y="6786.80625"><tspan>归并排序</tspan></tspan></text></g></g><g id="4290ce40fb7b"><rect x="424" y="6769.671875" rx="1px" ry="1px" width="110" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="433" y="6786.80625"><tspan>L/R下标的移动</tspan></tspan></text></g></g><g id="11b6d8aaeb4e"><rect x="322" y="6802.40625" rx="1px" ry="1px" width="918" height="460" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="331" y="7197.759375"><tspan>算法的稳定性：要排序的内容是一个复杂对象的多个数字属性，且其原本的初始顺序存在意义，那么我们需要在二次排序的基础上保持原有排序的</tspan></tspan><tspan x="331" y="7216.759375"><tspan>意义，才需要使用到稳定性的算法，例如要排序的内容是一组原本按照价格高低排序的对象，如今需要按照销量高低排序，使用稳定性算法，可以</tspan></tspan><tspan x="331" y="7235.759375"><tspan>使得想同销量的对象依旧保持着价格高低的排序展现，只有销量不同的才会重新排序。（当然，如果需求不需要保持初始的排序意义，那么使用稳</tspan></tspan><tspan x="331" y="7254.759375"><tspan>定性算法依旧将毫无意义）。</tspan></tspan></text></g><image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://cdn2.processon.com/6098b5d3e4b0a89ba5e2d29d?e=1620624355&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:druWCpY62T8Jink2Q3El44zoXJY=" transform="translate(331, 6804.40625)" width="900" height="372"></image></g><g id="3de94eb231c9"><rect x="240" y="5998.453125" rx="5px" ry="5px" width="44" height="43" style="fill: #e5e5e5; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="15px" font-weight="normal" fill="rgb(0, 0, 0)"><tspan x="252" y="6024.90625"><tspan>图</tspan></tspan></text></g></g><g id="3a7b476e2ba8"><rect x="312" y="5663" rx="1px" ry="1px" width="284" height="42" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="321" y="5678.4"><tspan>特点:</tspan></tspan><tspan x="321" y="5697.4"><tspan>元素间具有多对多关系的非线性数据结构。</tspan></tspan></text></g></g><g id="2ba5fe891e5f"><rect x="312" y="5745.734375" rx="1px" ry="1px" width="74" height="24" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="321" y="5762.86875"><tspan>存储结构</tspan></tspan></text></g></g><g id="4d858cd37215"><rect x="414" y="5713" rx="1px" ry="1px" width="74" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="423" y="5730.134375"><tspan>邻接矩阵</tspan></tspan></text></g></g><g id="1872e811055c"><rect x="516" y="5713" rx="1px" ry="1px" width="774" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="525" y="5730.134375"><tspan>采用数组存储，每插入或删除一个元素需要移动大量元素。数组容量有限，当扩充容量时，需要复制全部元素，效率更低。</tspan></tspan></text></g></g><g id="db842ed6d555"><rect x="414" y="5745.734375" rx="1px" ry="1px" width="60" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="423" y="5762.86875"><tspan>邻接表</tspan></tspan></text></g></g><g id="cdd0199c12a8"><rect x="502" y="5745.734375" rx="1px" ry="1px" width="312" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="511" y="5762.86875"><tspan>由一个顺序存储的顶点和多个链式存储的边组成</tspan></tspan></text></g></g><g id="96dab3a73ac2"><rect x="414" y="5778.46875" rx="1px" ry="1px" width="74" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="423" y="5795.603125"><tspan>十字链表</tspan></tspan></text></g></g><g id="09e14e8c958c"><rect x="312" y="5811.203125" rx="1px" ry="1px" width="275" height="162" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="321" y="5965.3375"><tspan>深度有限和广度优先</tspan></tspan></text></g><image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://cdn2.processon.com/6096bb20e4b01cae7c743924?e=1620494641&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:TGi7PjQ1m9j6s7-XzCvUGb8c1C8=" transform="translate(321, 5813.203125)" width="257" height="129"></image></g><g id="35616bc51852"><rect x="615" y="5852.0625" rx="1px" ry="1px" width="560" height="80" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="624" y="5867.4625"><tspan>时间复杂度：</tspan></tspan><tspan x="624" y="5886.4625"><tspan>图有n个顶点和m条边,</tspan></tspan><tspan x="624" y="5905.4625"><tspan>当图的存储结构是邻接矩阵时，需要扫描邻接矩阵的每一个顶点，时间复杂度为 O(n^2)</tspan></tspan><tspan x="624" y="5924.4625"><tspan>当图的存储结构是邻接表时，需要扫描每一条单链表，时间复杂度为O(e)</tspan></tspan></text></g></g><g id="0cf9ea01242b"><rect x="312" y="6008.578125" rx="1px" ry="1px" width="46" height="24" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="321" y="6025.7125"><tspan>遍历</tspan></tspan></text></g></g><g id="4695ca26a28e"><rect x="386" y="5980.9375" rx="1px" ry="1px" width="552" height="80" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="395" y="5996.3375"><tspan>问题：</tspan></tspan><tspan x="395" y="6015.3375"><tspan>1. 指定遍历的第一个顶点</tspan></tspan><tspan x="395" y="6034.3375"><tspan>2. 由于一个顶点和多个顶点相邻，需要在多个邻接顶点间确定访问次序</tspan></tspan><tspan x="395" y="6053.3375"><tspan>3. 由于图中存在回路，必须对访问过的顶点做标记，防止出现重复访问同一顶点的情况</tspan></tspan></text></g></g><g id="191625d5d57b"><rect x="312" y="6110.3125" rx="1px" ry="1px" width="88" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="321" y="6127.446875"><tspan>最小生成树</tspan></tspan></text></g></g><g id="76ab77588561"><rect x="428" y="6068.9375" rx="1px" ry="1px" width="66" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="437" y="6086.071875"><tspan style="fill: rgb(196, 18, 48);">Kruskal</tspan></tspan></text></g></g><g id="2b2f9dd4c6e2"><rect x="428" y="6101.671875" rx="1px" ry="1px" width="49" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="437" y="6118.80625"><tspan style="fill: rgb(196, 18, 48);">Prim</tspan></tspan></text></g></g><g id="e12307c54b6d"><rect x="428" y="6134.40625" rx="1px" ry="1px" width="918" height="42" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="437" y="6149.80625"><tspan>一个有 n 个结点的连通图的生成树是原图的极小连通子图，且包含原图中的所有 n 个结点，并且有保持图连通的最少的边。 最小生成树可以用kru</tspan></tspan><tspan x="437" y="6168.80625"><tspan>skal（克鲁斯卡尔）算法或prim（普里姆）算法求出。</tspan></tspan></text></g></g><g id="0b6fca15db9d"><rect x="312" y="6235.28125" rx="1px" ry="1px" width="74" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="321" y="6252.415625"><tspan>最短路径</tspan></tspan></text></g></g><g id="9548907221e5"><rect x="414" y="6184.40625" rx="1px" ry="1px" width="918" height="61" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="423" y="6199.80625"><tspan>最短路径问题是图论研究中的一个经典算法问题，旨在寻找图（由结点和路径组成的）中两结点之间的最短路径。 算法具体的形式包括： 确定起</tspan></tspan><tspan x="423" y="6218.80625"><tspan>点的最短路径问题- 也叫单源最短路问题，即已知起始结点，求最短路径的问题。 在边权非负时适合使用Dijkstra算法，若边权为负时则适合使用B</tspan></tspan><tspan x="423" y="6237.80625"><tspan>ellman-ford算法或者SPFA算法。</tspan></tspan></text></g></g><g id="4d0a858afe83"><rect x="1360" y="6186.171875" rx="1px" ry="1px" width="214" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="1369" y="6203.30625"><tspan>某个顶点到其余顶点的最短路径</tspan></tspan></text></g></g><g id="affeceb3622d"><rect x="1360" y="6218.90625" rx="1px" ry="1px" width="172" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="1369" y="6236.040625"><tspan>每一对顶点间的最短路径</tspan></tspan></text></g></g><g id="faaf6c37bda5"><rect x="414" y="6253.40625" rx="1px" ry="1px" width="106" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="423" y="6270.540625"><tspan style="fill: rgb(196, 18, 48);">Bellman-ford</tspan></tspan></text></g></g><g id="dd67f86adf7a"><rect x="414" y="6286.140625" rx="1px" ry="1px" width="52" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="423" y="6303.275"><tspan style="fill: rgb(196, 18, 48);">SPFA</tspan></tspan></text></g></g><g id="67390dd14e91"><rect x="312" y="6335.25" rx="1px" ry="1px" width="144" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="321" y="6352.384375"><tspan>拓扑排序和关键路径</tspan></tspan></text></g></g><g id="0a5a33d6695a"><rect x="484" y="6318.875" rx="1px" ry="1px" width="63" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="493" y="6336.009375"><tspan>AOV网</tspan></tspan></text></g></g><g id="c20e979d1a45"><rect x="484" y="6351.609375" rx="1px" ry="1px" width="61" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="493" y="6368.74375"><tspan>AOE网</tspan></tspan></text></g></g><g id="d59f472a9fc3"><rect x="240" y="4356.625" rx="5px" ry="5px" width="84" height="42" style="fill: #e5e5e5; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="15px" font-weight="normal" fill="rgb(0, 0, 0)"><tspan x="252" y="4383.078125"><tspan>树形结构</tspan></tspan></text></g></g><g id="12765db13bfa"><rect x="352" y="3119" rx="1px" ry="1px" width="565" height="80" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="361" y="3134.4"><tspan>特点:</tspan></tspan><tspan x="361" y="3153.4"><tspan>1. 元素之间具有层次关系的非线性结构</tspan></tspan><tspan x="361" y="3172.4"><tspan>2. 有且仅有一个被称为根的结点</tspan></tspan><tspan x="361" y="3191.4"><tspan>3. 其余结点可分为m个互不相交的有限集合，每个集合又构成一棵树，叫根结点的子树。</tspan></tspan></text></g></g><g id="03e5ade71e9c"><rect x="352" y="4171.015625" rx="1px" ry="1px" width="60" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="361" y="4188.15"><tspan>二叉树</tspan></tspan></text></g></g><g id="ccc7f563b7b7"><rect x="440" y="3248.375" rx="1px" ry="1px" width="74" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="449" y="3265.509375"><tspan>存储结构</tspan></tspan></text></g></g><g id="3d867bbaa0c3"><rect x="542" y="3207" rx="1px" ry="1px" width="396" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="551" y="3224.134375"><tspan>顺序存储：层次遍历。对于不完全的，会空置一些结点存储。</tspan></tspan></text></g></g><g id="dc3cf1fbb6ad"><rect x="542" y="3264.734375" rx="1px" ry="1px" width="74" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="551" y="3281.86875"><tspan>链式存储</tspan></tspan></text></g></g><g id="6ad26daa2776"><rect x="644" y="3239.734375" rx="1px" ry="1px" width="606" height="42" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="653" y="3255.134375"><tspan>二叉链式存储（空间利用率高）:设置两个指针域和一个数据域。</tspan></tspan><tspan x="653" y="3274.134375"><tspan>每个结点只存储了其孩子结点的单向关系，没有存储到父结点的关系。需要从根结点遍历查找。</tspan></tspan></text></g></g><g id="2aa802bf8e3a"><rect x="644" y="3289.734375" rx="1px" ry="1px" width="505" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="653" y="3306.86875"><tspan>三叉链式存储：设置三个指针域和一个数据域： parent、lchild、data、rchild</tspan></tspan></text></g></g><g id="364e6a678e07"><rect x="440" y="3685.171875" rx="1px" ry="1px" width="74" height="24" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="449" y="3702.30625"><tspan>遍历方式</tspan></tspan></text></g></g><g id="8a19d2ccce6f"><rect x="542" y="3501.4375" rx="1px" ry="1px" width="46" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="551" y="3518.571875"><tspan>递归</tspan></tspan></text></g></g><g id="e2b8d6cef94f"><rect x="616" y="3322.46875" rx="1px" ry="1px" width="74" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="625" y="3339.603125"><tspan>先序遍历</tspan></tspan></text></g></g><g id="ae476cd71db5"><rect x="616" y="3355.203125" rx="1px" ry="1px" width="74" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="625" y="3372.3375"><tspan>中序遍历</tspan></tspan></text></g></g><g id="6f089fd1e15f"><rect x="616" y="3387.9375" rx="1px" ry="1px" width="74" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="625" y="3405.071875"><tspan>后序遍历</tspan></tspan></text></g></g><g id="74f3a92d6ff6"><rect x="616" y="3420.671875" rx="1px" ry="1px" width="340" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="625" y="3437.80625"><tspan>特点：结构简洁、易于实现、但开销大、运行效率低</tspan></tspan></text></g></g><g id="8c87b63cf679"><rect x="616" y="3453.40625" rx="1px" ry="1px" width="346" height="252" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="625" y="3697.540625"><tspan>                                                    </tspan></tspan></text></g><image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://cdn2.processon.com/60960e9be4b0bd406b33af11?e=1620450475&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:mVHS-GczwqM8tynxzb0TXXPIyVY=" transform="translate(625, 3455.40625)" width="328" height="219"></image></g><g id="2c2036a184cc"><rect x="542" y="3880.515625" rx="1px" ry="1px" width="60" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="551" y="3897.65"><tspan>非递归</tspan></tspan></text></g></g><g id="54ae81c8a124"><rect x="630" y="3713.140625" rx="1px" ry="1px" width="368" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="639" y="3730.275"><tspan>使用临时遍历保存中间结果，使用循环结构代替递归过程</tspan></tspan></text></g></g><g id="43d52e17f07a"><rect x="630" y="3896.875" rx="1px" ry="1px" width="354" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="639" y="3914.009375"><tspan>利用栈保存中间结果：通过回溯访问二叉树的每个结点</tspan></tspan></text></g></g><g id="ce01a03da556"><rect x="1012" y="3745.875" rx="1px" ry="1px" width="468" height="99" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="1021" y="3761.275"><tspan>先序：</tspan></tspan><tspan x="1021" y="3780.275"><tspan>1. 将二叉树的根结点入栈</tspan></tspan><tspan x="1021" y="3799.275"><tspan>2. 若栈非空，将结点从栈中弹出并访问</tspan></tspan><tspan x="1021" y="3818.275"><tspan>3. 依次访问当前访问结点的左孩子结点，并将当前结点的右孩子结点入栈</tspan></tspan><tspan x="1021" y="3837.275"><tspan>4. 重复步骤2、3直到栈为空</tspan></tspan></text></g></g><g id="35f4d2d92a5f"><rect x="1012" y="3852.875" rx="1px" ry="1px" width="482" height="99" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="1021" y="3868.275"><tspan>中序：</tspan></tspan><tspan x="1021" y="3887.275"><tspan>1. 将二叉树根结点入栈</tspan></tspan><tspan x="1021" y="3906.275"><tspan>2. 若栈非空，将栈顶结点的左子结点入栈，直到栈顶结点的左子结点为空。</tspan></tspan><tspan x="1021" y="3925.275"><tspan>3. 将栈顶结点弹出并访问，并使栈顶结点的右子结点入栈</tspan></tspan><tspan x="1021" y="3944.275"><tspan>4. 重复2、3 直到栈为空</tspan></tspan></text></g></g><g id="88803cee04c5"><rect x="1012" y="3959.875" rx="1px" ry="1px" width="284" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="1021" y="3977.009375"><tspan>后序：先访问左右子树，最后再访问自己。</tspan></tspan></text></g></g><g id="a35ae37d9dc8"><rect x="1012" y="3992.609375" rx="1px" ry="1px" width="427" height="80" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="1021" y="4008.009375"><tspan style="font-weight: bold;">层次:</tspan></tspan><tspan x="1021" y="4027.009375"><tspan style="font-weight: bold;">1. 将根结点入队</tspan></tspan><tspan x="1021" y="4046.009375"><tspan style="font-weight: bold;">2. 若队非空，取出队首结点并访问，将队首结点的孩子结点入队。</tspan></tspan><tspan x="1021" y="4065.009375"><tspan style="font-weight: bold;">3. 重复执行步骤2直到队为空</tspan></tspan></text></g></g><g id="80d8c9eec2b3"><rect x="440" y="4113.34375" rx="1px" ry="1px" width="116" height="24" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="449" y="4130.478125"><tspan>遍历算法的应用</tspan></tspan></text></g></g><g id="a89fc531fe7e"><rect x="584" y="4080.609375" rx="1px" ry="1px" width="354" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="593" y="4097.74375"><tspan>查找算法：结点比左子结点数值大，比右子结点数值小</tspan></tspan></text></g></g><g id="4556cb0371c8"><rect x="584" y="4113.34375" rx="1px" ry="1px" width="144" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="593" y="4130.478125"><tspan>统计二叉树结点个数</tspan></tspan></text></g></g><g id="14ab34cd75c4"><rect x="584" y="4146.078125" rx="1px" ry="1px" width="102" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="593" y="4163.2125"><tspan>求二叉树深度</tspan></tspan></text></g></g><g id="5664a7cfebfe"><rect x="440" y="4359.3125" rx="1px" ry="1px" width="102" height="24" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="449" y="4376.446875"><tspan>二叉树的建立</tspan></tspan></text></g></g><g id="28646325ef1d"><rect x="570" y="4342.953125" rx="1px" ry="1px" width="522" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="579" y="4360.0875"><tspan>由中序和先序遍历序列建立二叉树（不大明白这段代码怎样就实现了创建二叉树）</tspan></tspan></text></g></g><g id="0827b9cb0b66"><rect x="1120" y="4178.8125" rx="1px" ry="1px" width="711" height="353" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"></text></g><image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://cdn2.processon.com/60962ed5e4b0bd406b33fb79?e=1620458725&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:-3jeOfoxipKiQFrRdTWkeEoyGTc=" transform="translate(1129, 4180.8125)" width="693" height="322"></image></g><g id="dc9f44b23cb4"><rect x="570" y="4539.8125" rx="1px" ry="1px" width="228" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="579" y="4556.946875"><tspan>标明空子树的先序遍历创建二叉树</tspan></tspan></text></g></g><g id="431654fabcc8"><rect x="440" y="4623.421875" rx="1px" ry="1px" width="354" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="449" y="4640.55625"><tspan>最优二叉树：哈夫曼树及哈夫曼编码（无损压缩技术）</tspan></tspan></text></g></g><g id="732bcbef94a2"><rect x="822" y="4572.546875" rx="1px" ry="1px" width="580" height="61" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="831" y="4587.946875"><tspan>特性：</tspan></tspan><tspan x="831" y="4606.946875"><tspan>1. 出现频率越高则权值给得越大，靠近根结点越近，减少判断量（比如学生成绩区域划分）</tspan></tspan><tspan x="831" y="4625.946875"><tspan>2. 前缀编码</tspan></tspan></text></g></g><g id="4f4c1e21beb9"><rect x="822" y="4641.546875" rx="1px" ry="1px" width="410" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="831" y="4658.68125"><tspan>哈夫曼编码：最早用于解决远距离电报通信的数据传输优化问题</tspan></tspan></text></g></g><g id="5340c2eea22f"><rect x="822" y="4674.28125" rx="1px" ry="1px" width="503" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="831" y="4691.415625"><tspan>给定n个带有权值的结点作为叶结点，构造出的具有最小带权路径长度的二叉树</tspan></tspan></text></g></g><g id="8dc552d7edfb"><rect x="440" y="4921.015625" rx="1px" ry="1px" width="186" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="449" y="4938.15"><tspan>堆有时可以看作完全二叉树</tspan></tspan></text></g></g><g id="2c07f9342c72"><rect x="654" y="4707.015625" rx="1px" ry="1px" width="830" height="137" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="663" y="4722.415625"><tspan>①堆通常是一个可以被看做一棵树的数组对象。堆总是满足下列性质：</tspan></tspan><tspan x="663" y="4741.415625"><tspan>   ·堆中某个节点的值总是不大于或不小于其父节点的值；</tspan></tspan><tspan x="663" y="4760.415625"><tspan>   ·堆总是一棵完全二叉树。</tspan></tspan><tspan x="663" y="4779.415625"><tspan>将根节点最大的堆叫做最大堆或大根堆，根节点最小的堆叫做最小堆或小根堆。常见的堆有二叉堆、斐波那契堆等。</tspan></tspan><tspan x="663" y="4798.415625"><tspan>②堆是在程序运行时，而不是在程序编译时，申请某个大小的内存空间。即动态分配内存，对其访问和对一般内存的访问没有区别。</tspan></tspan><tspan x="663" y="4817.415625"><tspan>③堆是应用程序在运行的时候请求操作系统分配给自己内存，一般是申请/给予的过程。</tspan></tspan><tspan x="663" y="4836.415625"><tspan>④堆是指程序运行时申请的动态内存，而栈只是指一种使用堆的方法(即先进后出)。</tspan></tspan></text></g></g><g id="d6e82213ab7f"><rect x="654" y="4852.015625" rx="1px" ry="1px" width="214" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="663" y="4869.15"><tspan>动态分配的内存放在系统的堆里</tspan></tspan></text></g></g><g id="02ca25d919f5"><rect x="654" y="4884.75" rx="1px" ry="1px" width="459" height="225" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"></text></g><image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://cdn2.processon.com/60974babe4b07df1031caf1d?e=1620531643&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:H0Bu57QZzWIerd8iB1o06skPq3E=" transform="translate(663, 4886.75)" width="441" height="194"></image></g><g id="a307db2c9cf0"><rect x="654" y="5117.75" rx="1px" ry="1px" width="918" height="42" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="663" y="5133.15"><tspan>heap这种树是按大小排的：从大到小叫max heap，从小到大叫min heap。堆都能用树来表示，并且一般树的实现都是利用链表。而二叉堆是一</tspan></tspan><tspan x="663" y="5152.15"><tspan>种特殊的堆，它用完全二叉树表示，却可以利用数组实现。</tspan></tspan></text></g></g><g id="9c7058ac11be"><rect x="352" y="5373.484375" rx="1px" ry="1px" width="74" height="24" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="361" y="5390.61875"><tspan>树和森林</tspan></tspan></text></g></g><g id="4fd1ef5a9366"><rect x="454" y="5167.75" rx="1px" ry="1px" width="452" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="463" y="5184.884375"><tspan>树的层次关系必须用链式存储结构存储，通过链连接父节点和孩子结点</tspan></tspan></text></g></g><g id="1e09d4a2b239"><rect x="454" y="5200.484375" rx="1px" ry="1px" width="634" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="463" y="5217.61875"><tspan>一个结点的多个孩子结点（互称兄弟结点）之间是线性关系，可以采用顺序存储结构或链式存储结构</tspan></tspan></text></g></g><g id="4a73cb17a3d5"><rect x="454" y="5233.21875" rx="1px" ry="1px" width="186" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="463" y="5250.353125"><tspan>遍历：先序遍历和后序遍历</tspan></tspan></text></g></g><g id="0fbb3f49dca4"><rect x="454" y="5265.953125" rx="1px" ry="1px" width="331" height="338" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"></text></g><image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://cdn2.processon.com/60974f3be4b0ea2d1a9653a3?e=1620532555&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:aak4LCNVi4zuxijJFyDwVcF38-k=" transform="translate(463, 5267.953125)" width="313" height="307"></image></g><g id="5873c0388fd2"><rect x="352" y="5611.953125" rx="1px" ry="1px" width="60" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="361" y="5629.0875"><tspan>红黑树</tspan></tspan></text></g></g><g id="6846c4174724"><rect x="240" y="2595.71875" rx="5px" ry="5px" width="84" height="42" style="fill: #e5e5e5; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="15px" font-weight="normal" fill="rgb(0, 0, 0)"><tspan x="252" y="2622.171875"><tspan>串和数组</tspan></tspan></text></g></g><g id="c292c7de9ec7"><rect x="352" y="2301.34375" rx="1px" ry="1px" width="323" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="361" y="2318.478125"><tspan>串（字符串），数据类型定义，Java IString 接口</tspan></tspan></text></g></g><g id="609476775042"><rect x="702.71875" y="2141" rx="1px" ry="1px" width="918" height="42" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="711.71875" y="2156.4"><tspan>串和线性表区别：串是一种特殊的线性表，其中元素全部为字符型；串和线性表的操作有较大的区别；串通常以整体作为操作的对象，而线性表通</tspan></tspan><tspan x="711.71875" y="2175.4"><tspan>常以单个元素作为操作的对象。</tspan></tspan></text></g></g><g id="693e1890d98d"><rect x="702.71875" y="2207.375" rx="1px" ry="1px" width="60" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="711.71875" y="2224.509375"><tspan>顺序串</tspan></tspan></text></g></g><g id="2997e6a666bf"><rect x="790.71875" y="2191" rx="1px" ry="1px" width="116" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="799.71875" y="2208.134375"><tspan>字符数组构造串</tspan></tspan></text></g></g><g id="e6262966ee75"><rect x="790.71875" y="2223.734375" rx="1px" ry="1px" width="284" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="799.71875" y="2240.86875"><tspan>增、删、比较，往往把字符串看成一个整体</tspan></tspan></text></g></g><g id="439acdee94d9"><rect x="702.71875" y="2293.609375" rx="1px" ry="1px" width="46" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="711.71875" y="2310.74375"><tspan>链串</tspan></tspan></text></g></g><g id="3a35ab8dcef0"><rect x="776.71875" y="2256.46875" rx="1px" ry="1px" width="902" height="99" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="785.71875" y="2271.86875"><tspan>特点：</tspan></tspan><tspan x="785.71875" y="2290.86875"><tspan>1. 由一系列大小相同的结点组成，每个结点用数据域存放字符</tspan></tspan><tspan x="785.71875" y="2309.86875"><tspan>2. 若每个结点的数据域为 一个字符 = 单字符链表</tspan></tspan><tspan x="785.71875" y="2328.86875"><tspan>若每个结点的数据域为 多个字符 = 块链表</tspan></tspan><tspan x="785.71875" y="2347.86875"><tspan>3. 在串的链式存储中，单字符链表的插入删除操作较为简单，但存储效率低。块链表虽然存储效率高但插入删除操作需要移动字符，较为复杂。</tspan></tspan></text></g></g><g id="07ff580a1f70"><rect x="702.71875" y="2412.578125" rx="1px" ry="1px" width="228" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="711.71875" y="2429.7125"><tspan>模式匹配（在当前串寻找模式串）</tspan></tspan></text></g></g><g id="2a7619c3484d"><rect x="958.71875" y="2396.203125" rx="1px" ry="1px" width="97" height="24" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="967.71875" y="2413.3375"><tspan>Brute-Force</tspan></tspan></text></g></g><g id="fd908ee23fbb"><rect x="1083.34375" y="2363.46875" rx="1px" ry="1px" width="802" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="1092.34375" y="2380.603125"><tspan>从主串的第一个字符开始和模式串的第一个字符比较，相等则比较后续字符。不相等则从第二个字符开始重新和模式串进行比较</tspan></tspan></text></g></g><g id="fd5b4c803817"><rect x="1083.34375" y="2396.203125" rx="1px" ry="1px" width="189" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="1092.34375" y="2413.3375"><tspan>特点：效率低,存在重复比较</tspan></tspan></text></g></g><g id="58276fa3f2fd"><rect x="1083.34375" y="2428.9375" rx="1px" ry="1px" width="514" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="1092.34375" y="2446.071875"><tspan>时间复杂度(m为模式串的长度，n为主串的长度)：最好情况 O(m)，最坏O(m*n)</tspan></tspan></text></g></g><g id="c3be2ddaf510"><rect x="958.71875" y="2461.671875" rx="1px" ry="1px" width="49" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="967.71875" y="2478.80625"><tspan>KMP</tspan></tspan></text></g></g><g id="125c36d1bf41"><rect x="1035.859375" y="2461.671875" rx="1px" ry="1px" width="802" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="1044.859375" y="2478.80625"><tspan>当某次匹配失败时主串的开始比较位置不回退，而是利用部分字符匹配的结果将模式串向右移动较远的距离后再继续进行比较。</tspan></tspan></text></g></g><g id="804a78e0bae7"><rect x="352" y="2781.28125" rx="1px" ry="1px" width="349" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="361" y="2798.415625"><tspan>数组（具有n个相同数据类型的数据元素构成的集合）</tspan></tspan></text></g></g><g id="180c46dc815b"><rect x="728.640625" y="2494.40625" rx="1px" ry="1px" width="410" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="737.640625" y="2511.540625"><tspan>顺序存储的随机存储结构：按某种次序在地址连续的存储单元中</tspan></tspan></text></g></g><g id="6fa2b3646ce3"><rect x="728.640625" y="2527.140625" rx="1px" ry="1px" width="526" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="737.640625" y="2544.275"><tspan>特点： 数组元素被存放在一组地址连续的存储单元里，并且每个元素的大小相同。</tspan></tspan></text></g></g><g id="17f0736a185a"><rect x="728.640625" y="2576.25" rx="1px" ry="1px" width="46" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="737.640625" y="2593.384375"><tspan>遍历</tspan></tspan></text></g></g><g id="477c2c07e8bb"><rect x="802.640625" y="2559.875" rx="1px" ry="1px" width="60" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="811.640625" y="2577.009375"><tspan>行主序</tspan></tspan></text></g></g><g id="bc5c5dcdc79d"><rect x="802.640625" y="2592.609375" rx="1px" ry="1px" width="60" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="811.640625" y="2609.74375"><tspan>列主序</tspan></tspan></text></g></g><g id="51df1afe7e01"><rect x="728.640625" y="2821.75" rx="1px" ry="1px" width="144" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="737.640625" y="2838.884375"><tspan>特殊矩阵的压缩存储</tspan></tspan></text></g></g><g id="02e269e4b9bf"><rect x="900.640625" y="2625.34375" rx="1px" ry="1px" width="484" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="909.640625" y="2642.478125"><tspan>原则： 呈现规律性分布的、值相同的多个矩阵元素压缩存储到一个存储空间</tspan></tspan></text></g></g><g id="24b012970c7b"><rect x="900.640625" y="2674.453125" rx="1px" ry="1px" width="144" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="909.640625" y="2691.5875"><tspan>三角矩阵的压缩存储</tspan></tspan></text></g></g><g id="e4a6882edb1c"><rect x="1072.640625" y="2658.078125" rx="1px" ry="1px" width="102" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="1081.640625" y="2675.2125"><tspan>线性压缩存储</tspan></tspan></text></g></g><g id="2baac2112ebc"><rect x="1072.640625" y="2690.8125" rx="1px" ry="1px" width="186" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="1081.640625" y="2707.946875"><tspan>三角形的二维数组压缩存储</tspan></tspan></text></g></g><g id="6724014aaf27"><rect x="900.640625" y="2723.546875" rx="1px" ry="1px" width="144" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="909.640625" y="2740.68125"><tspan>对称矩阵的压缩存储</tspan></tspan></text></g></g><g id="8f8affefafdb"><rect x="900.640625" y="2756.28125" rx="1px" ry="1px" width="144" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="909.640625" y="2773.415625"><tspan>对角矩阵的压缩存储</tspan></tspan></text></g></g><g id="79b869e0a74c"><rect x="900.640625" y="2903.59375" rx="1px" ry="1px" width="144" height="24" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="909.640625" y="2920.728125"><tspan>稀疏矩阵的压缩存储</tspan></tspan></text></g></g><g id="6009101471b5"><rect x="1072.640625" y="2789.015625" rx="1px" ry="1px" width="256" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="1081.640625" y="2806.15"><tspan>非零元素三元组（行号、列号、元素）</tspan></tspan></text></g></g><g id="68349bec4586"><rect x="1072.640625" y="2903.59375" rx="1px" ry="1px" width="102" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="1081.640625" y="2920.728125"><tspan>十字链表存储</tspan></tspan></text></g></g><g id="29101d39f670"><rect x="1202.640625" y="2821.75" rx="1px" ry="1px" width="354" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="1211.640625" y="2838.884375"><tspan>当稀疏矩阵中的非零元素的位置或个数经常发生变化时</tspan></tspan></text></g></g><g id="4588bfcd4b5e"><rect x="1202.640625" y="2919.953125" rx="1px" ry="1px" width="88" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="1211.640625" y="2937.0875"><tspan>五个域组成</tspan></tspan></text></g></g><g id="0da8122a0afc"><rect x="1318.640625" y="2854.484375" rx="1px" ry="1px" width="79" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="1327.640625" y="2871.61875"><tspan>row: 行号</tspan></tspan></text></g></g><g id="fe28e3af9017"><rect x="1318.640625" y="2887.21875" rx="1px" ry="1px" width="104" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="1327.640625" y="2904.353125"><tspan>column: 列号</tspan></tspan></text></g></g><g id="db9863152196"><rect x="1318.640625" y="2919.953125" rx="1px" ry="1px" width="113" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="1327.640625" y="2937.0875"><tspan>value:元素的值</tspan></tspan></text></g></g><g id="74d9e1946fe2"><rect x="1318.640625" y="2952.6875" rx="1px" ry="1px" width="309" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="1327.640625" y="2969.821875"><tspan>right: 与元素同行的下一个非零元素结点的指针</tspan></tspan></text></g></g><g id="d70736222f08"><rect x="1318.640625" y="2985.421875" rx="1px" ry="1px" width="322" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="1327.640625" y="3002.55625"><tspan>down：与元素同列的下一个非零元素结点的指针</tspan></tspan></text></g></g><g id="0063c52f7abc"><rect x="1072.640625" y="3018.15625" rx="1px" ry="1px" width="228" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="1081.640625" y="3035.290625"><tspan>原则：只给非零元素分配存储空间</tspan></tspan></text></g></g><g id="d744bbf6cff0"><rect x="728.640625" y="3050.890625" rx="1px" ry="1px" width="918" height="42" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="737.640625" y="3066.290625"><tspan>动态数组:  在声明时没有确定数组大小的数组，即忽略圆括号中的下标；当要用它时，可随时用ReDim语句重新指出数组的大小。使用动态数组的</tspan></tspan><tspan x="737.640625" y="3085.290625"><tspan>优点是可以根据用户需要，有效利用存储空间。</tspan></tspan></text></g></g><g id="e3399a1e874b"><rect x="240" y="1661.078125" rx="5px" ry="5px" width="84" height="43" style="fill: #e5e5e5; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="15px" font-weight="normal" fill="rgb(0, 0, 0)"><tspan x="252" y="1687.53125"><tspan>栈和队列</tspan></tspan></text></g></g><g id="cd538b67d1ee"><rect x="352" y="1250" rx="1px" ry="1px" width="210" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="361" y="1267.134375"><tspan>数据类型定义: Java IStack接口</tspan></tspan></text></g></g><g id="a84ce9de3f61"><rect x="352" y="1403.46875" rx="1px" ry="1px" width="38" height="24" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="361" y="1420.603125"><tspan>栈</tspan></tspan></text></g></g><g id="795e313dc9e1"><rect x="418" y="1282.734375" rx="1px" ry="1px" width="74" height="61" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="427" y="1298.134375"><tspan>特点：</tspan></tspan><tspan x="427" y="1317.134375"><tspan>先进后出</tspan></tspan><tspan x="427" y="1336.134375"><tspan>栈顶top</tspan></tspan></text></g></g><g id="7f24ff5beba6"><rect x="418" y="1368.109375" rx="1px" ry="1px" width="60" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="427" y="1385.24375"><tspan>顺序栈</tspan></tspan></text></g></g><g id="f9a67e3c8efd"><rect x="506" y="1351.734375" rx="1px" ry="1px" width="46" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="515" y="1368.86875"><tspan>应用</tspan></tspan></text></g></g><g id="abc082e31c02"><rect x="580" y="1351.734375" rx="1px" ry="1px" width="130" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="589" y="1368.86875"><tspan>括号匹配语法检查</tspan></tspan></text></g></g><g id="0d3bddb4d235"><rect x="506" y="1384.46875" rx="1px" ry="1px" width="102" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="515" y="1401.603125"><tspan>多栈空间共享</tspan></tspan></text></g></g><g id="fa813a5f9a61"><rect x="636" y="1384.46875" rx="1px" ry="1px" width="354" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="645" y="1401.603125"><tspan>两个栈的栈顶在栈空间的某一位置相遇时，才产生上溢</tspan></tspan></text></g></g><g id="7bf33c0f983d"><rect x="418" y="1470.703125" rx="1px" ry="1px" width="46" height="24" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="427" y="1487.8375"><tspan>链栈</tspan></tspan></text></g></g><g id="1d9de4cf596f"><rect x="492" y="1417.203125" rx="1px" ry="1px" width="566" height="99" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="501" y="1432.603125"><tspan>特点：</tspan></tspan><tspan x="501" y="1451.603125"><tspan>1. 依然是入栈出栈只能在栈顶进行，所以不存在在栈的任意位置进行插入和删除的操作，</tspan></tspan><tspan x="501" y="1470.603125"><tspan>top指向栈顶元素结点，每个结点的指针域指向后继结点。</tspan></tspan><tspan x="501" y="1489.603125"><tspan>2. 入栈： 构造新结点，改变新结点和首结点的指针域，使新结点成为新的栈顶结点。</tspan></tspan><tspan x="501" y="1508.603125"><tspan>出栈：修改top指针域的值，返回被删结点的数据域值。</tspan></tspan></text></g></g><g id="cf002f451550"><rect x="492" y="1524.203125" rx="1px" ry="1px" width="130" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="501" y="1541.3375"><tspan>应用：汉诺塔问题</tspan></tspan></text></g></g><g id="58c0598bf247"><rect x="352" y="1807.046875" rx="1px" ry="1px" width="46" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="361" y="1824.18125"><tspan>队列</tspan></tspan></text></g></g><g id="992bea547d79"><rect x="426" y="1556.9375" rx="1px" ry="1px" width="223" height="80" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="435" y="1572.3375"><tspan>特点：</tspan></tspan><tspan x="435" y="1591.3375"><tspan>先进先出</tspan></tspan><tspan x="435" y="1610.3375"><tspan>front 队首元素，出队，增加变量</tspan></tspan><tspan x="435" y="1629.3375"><tspan>rear 队尾元素，入队。</tspan></tspan></text></g></g><g id="713bd18bf52f"><rect x="426" y="1644.9375" rx="1px" ry="1px" width="74" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="435" y="1662.071875"><tspan>顺序队列</tspan></tspan></text></g></g><g id="b23b7e88cf20"><rect x="528" y="1644.9375" rx="1px" ry="1px" width="298" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="537" y="1662.071875"><tspan>存在假溢出现象，存储单元没有重复使用机制</tspan></tspan></text></g></g><g id="60629a240dfb"><rect x="426" y="1694.046875" rx="1px" ry="1px" width="102" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="435" y="1711.18125"><tspan>循环顺序队列</tspan></tspan></text></g></g><g id="d17060d861c8"><rect x="556" y="1677.671875" rx="1px" ry="1px" width="170" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="565" y="1694.80625"><tspan>队空条件: front == rear</tspan></tspan></text></g></g><g id="f160c3da83a6"><rect x="556" y="1710.40625" rx="1px" ry="1px" width="259" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="565" y="1727.540625"><tspan>队满条件: front =(rear +1) %maxSize</tspan></tspan></text></g></g><g id="c2ddf76c451e"><rect x="426" y="1777.640625" rx="1px" ry="1px" width="60" height="24" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="435" y="1794.775"><tspan>链队列</tspan></tspan></text></g></g><g id="9f077e9b59b2"><rect x="514" y="1743.140625" rx="1px" ry="1px" width="918" height="61" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="523" y="1758.540625"><tspan>特点：</tspan></tspan><tspan x="523" y="1777.540625"><tspan>1.依然不存在在队列的任意位置进行插入和删除的情况，不需要设置头结点，只需要将front和rear分别指向队首结点和队尾结点，每个结点的指针</tspan></tspan><tspan x="523" y="1796.540625"><tspan>域指向后继结点。</tspan></tspan></text></g></g><g id="31bc03c7df9b"><rect x="514" y="1812.140625" rx="1px" ry="1px" width="130" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="523" y="1829.275"><tspan>也存在假溢出现象</tspan></tspan></text></g></g><g id="c8c678890f9d"><rect x="426" y="1907.015625" rx="1px" ry="1px" width="298" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="435" y="1924.15"><tspan>优先级队列（堆可以当作优先级队列来使用）</tspan></tspan></text></g></g><g id="7387d6449ea1"><rect x="752" y="1844.875" rx="1px" ry="1px" width="608" height="80" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="761" y="1860.275"><tspan>特点：</tspan></tspan><tspan x="761" y="1879.275"><tspan>1. 在普通队列的基础之上将队列中的数据元素按照关键字的值进行有序排列。</tspan></tspan><tspan x="761" y="1898.275"><tspan>2. 在队首进行删除操作，插入操作不一定在队尾进行，而是按照优先级插入到队列的合适位置。</tspan></tspan><tspan x="761" y="1917.275"><tspan>3. 为了快速访问优先级高的元素，以及快速地插入数据元素，通常使用链式存储结构。</tspan></tspan></text></g></g><g id="f59f93f483cf"><rect x="752" y="1932.875" rx="1px" ry="1px" width="158" height="61" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="761" y="1948.275"><tspan>应用：</tspan></tspan><tspan x="761" y="1967.275"><tspan>进程服务对CPU的获取</tspan></tspan><tspan x="761" y="1986.275"><tspan> </tspan></tspan></text></g></g><g id="66655e1a18b2"><rect x="426" y="2029.515625" rx="1px" ry="1px" width="74" height="24" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="435" y="2046.65"><tspan>双端队列</tspan></tspan></text></g></g><g id="7f992a1746d8"><rect x="528" y="2001.875" rx="1px" ry="1px" width="918" height="80" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="537" y="2017.275"><tspan>双端队列是一种插入和删除操作在两端均可进行的线性表，可以把双端队列看成栈底连在一起的两个栈。他们与两个栈共享存储空间的共享栈的不</tspan></tspan><tspan x="537" y="2036.275"><tspan>同指出是，两个栈的栈顶指针式向两端延伸的。由于双端队列允许在两端插入和删除元素，因此需要设立两个指针，分别指向双端队列中两端的元</tspan></tspan><tspan x="537" y="2055.275"><tspan>素。</tspan></tspan><tspan x="537" y="2074.275"><tspan>允许在一端进行插入和删除（进队和出队），另一端只允许删除的双端队列称为输入受限的双端队列</tspan></tspan></text></g></g><g id="139d14dc974c"><rect x="352" y="2089.875" rx="1px" ry="1px" width="116" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="361" y="2107.009375"><tspan>栈和队列的比较</tspan></tspan></text></g></g><g id="e8467796d29f"><rect x="496" y="2089.875" rx="1px" ry="1px" width="342" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="505" y="2107.009375"><tspan>1. 顺序栈可以实现多栈空间共享，而顺序队列不可以</tspan></tspan></text></g></g><g id="b0d629516b24"><rect x="240" y="827.875" rx="5px" ry="5px" width="69" height="42" style="fill: #e5e5e5; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="15px" font-weight="normal" fill="rgb(0, 0, 0)"><tspan x="252" y="854.328125"><tspan>线性表</tspan></tspan></text></g></g><g id="5ba77b6d511e"><rect x="337" y="474" rx="1px" ry="1px" width="102" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="346" y="491.134375"><tspan>抽象数据类型</tspan></tspan></text></g></g><g id="9210123a191e"><rect x="467" y="474" rx="1px" ry="1px" width="109" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="476" y="491.134375"><tspan>Java: IList接口</tspan></tspan></text></g></g><g id="80c19914f1e3"><rect x="337" y="543.875" rx="1px" ry="1px" width="144" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="346" y="561.009375"><tspan>顺序表（顺序存储）</tspan></tspan></text></g></g><g id="e9c14b33e8a6"><rect x="509" y="506.734375" rx="1px" ry="1px" width="482" height="99" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="518" y="522.134375"><tspan>特点：</tspan></tspan><tspan x="518" y="541.134375"><tspan>1. 逻辑上相邻的元素在物理存储位置上也相邻</tspan></tspan><tspan x="518" y="560.134375"><tspan>2. 可按照元素的位序号进行随机存取</tspan></tspan><tspan x="518" y="579.134375"><tspan>3. 进行插入删除操作需要移动大量的数据元素</tspan></tspan><tspan x="518" y="598.134375"><tspan>4. 需要进行存储空间的预先分配，可能会造成空间浪费，但存储密度较高。</tspan></tspan></text></g></g><g id="4b97236b2b29"><rect x="337" y="770.734375" rx="1px" ry="1px" width="144" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="346" y="787.86875"><tspan>链式表（链式存储）</tspan></tspan></text></g></g><g id="3ed33324551d"><rect x="509" y="631.875" rx="1px" ry="1px" width="382" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="518" y="649.009375"><tspan>单链表：只包含一个指针域（指向后继节点的指针）的链表</tspan></tspan></text></g></g><g id="cfd8e72c6a6c"><rect x="919" y="613.734375" rx="1px" ry="1px" width="580" height="61" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="928" y="629.134375"><tspan>特点：</tspan></tspan><tspan x="928" y="648.134375"><tspan>1. 存在是否带头结点的考虑（头结点不存放任何数据，指针域存放指向第一个结点的指针）</tspan></tspan><tspan x="928" y="667.134375"><tspan>2. 结点的存储空间是在插入和删除过程中动态申请和释放的，不需要预先分配</tspan></tspan></text></g></g><g id="687cba10d3dc"><rect x="509" y="682.734375" rx="1px" ry="1px" width="74" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="518" y="699.86875"><tspan>循环链表</tspan></tspan></text></g></g><g id="489d85c3a37b"><rect x="611" y="682.734375" rx="1px" ry="1px" width="424" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="620" y="699.86875"><tspan>特点：将链表的首尾相接，将尾结点的指针域指向头结点的指针。</tspan></tspan></text></g></g><g id="9d620ef10993"><rect x="509" y="724.109375" rx="1px" ry="1px" width="74" height="24" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="518" y="741.24375"><tspan>双向链表</tspan></tspan></text></g></g><g id="f3a87bbccc8d"><rect x="611" y="715.46875" rx="1px" ry="1px" width="918" height="42" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="620" y="730.86875"><tspan>特点：具有两个指针域，一个指向前驱结点，一个指向后继结点。使得查找某个结点的前驱结点不需要从表头开始顺着链表依次进行查找，减小时</tspan></tspan><tspan x="620" y="749.86875"><tspan>间复杂度。</tspan></tspan></text></g></g><g id="c0484a6b9bf7"><rect x="509" y="846.609375" rx="1px" ry="1px" width="144" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="518" y="863.74375"><tspan>顺序表和链表的比较</tspan></tspan></text></g></g><g id="ddcfca264c58"><rect x="681" y="765.46875" rx="1px" ry="1px" width="431" height="80" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="690" y="780.86875"><tspan>顺序表：</tspan></tspan><tspan x="690" y="799.86875"><tspan>1. 存储密度高，空间开销小。可用数组实现。</tspan></tspan><tspan x="690" y="818.86875"><tspan>2. 需要预先分配存储空间。存取的时间复杂度为 O(1)。</tspan></tspan><tspan x="690" y="837.86875"><tspan>3. 不便于动态操作（插入、删除）。插入删除元素的复杂度为 O(n)</tspan></tspan></text></g></g><g id="d3c8b27aae40"><rect x="681" y="853.46875" rx="1px" ry="1px" width="575" height="99" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="690" y="868.86875"><tspan>链表：</tspan></tspan><tspan x="690" y="887.86875"><tspan>1. 存储密度低</tspan></tspan><tspan x="690" y="906.86875"><tspan>2. 存储空间动态分配</tspan></tspan><tspan x="690" y="925.86875"><tspan>3. 插入、删除效率高,时间复杂度为 O(1)。</tspan></tspan><tspan x="690" y="944.86875"><tspan>4. 不可按照位序号随机存取. 必须从头结点开始沿着后继结点进行访问，时间复杂度O(n)。</tspan></tspan></text></g></g><g id="e8e4584a9ec4"><rect x="337" y="1079.96875" rx="1px" ry="1px" width="79" height="24" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="346" y="1097.103125"><tspan>hashmap</tspan></tspan></text></g></g><g id="6571c33694bd"><rect x="444.265625" y="960.46875" rx="1px" ry="1px" width="245" height="264" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="453.265625" y="1216.603125"><tspan>拉链表</tspan></tspan></text></g><image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://cdn2.processon.com/60978760e4b0bd406b361aa5?e=1620546928&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:zx8Edp94JcpnuIW7OjVYr9afAdE=" transform="translate(453.265625, 962.46875)" width="227" height="231"></image></g><g id="32ab6a28625f"><rect x="240" y="217.546875" rx="5px" ry="5px" width="159" height="42" style="fill: #e5e5e5; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="15px" font-weight="normal" fill="rgb(0, 0, 0)"><tspan x="252" y="244"><tspan>数据结构的基本概念</tspan></tspan></text></g></g><g id="32d6556c672c"><rect x="427" y="160.9375" rx="1px" ry="1px" width="74" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="436" y="178.071875"><tspan>数据结构</tspan></tspan></text></g></g><g id="1e9caacc8361"><rect x="529" y="79.109375" rx="1px" ry="1px" width="74" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="538" y="96.24375"><tspan>逻辑结构</tspan></tspan></text></g></g><g id="b1a230433baa"><rect x="631" y="30" rx="1px" ry="1px" width="46" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="640" y="47.134375"><tspan>集合</tspan></tspan></text></g></g><g id="b0a64da91353"><rect x="631" y="62.734375" rx="1px" ry="1px" width="74" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="640" y="79.86875"><tspan>线性结构</tspan></tspan></text></g></g><g id="e99fc74cac52"><rect x="631" y="95.46875" rx="1px" ry="1px" width="74" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="640" y="112.603125"><tspan>树形结构</tspan></tspan></text></g></g><g id="76869f8f51c5"><rect x="631" y="128.203125" rx="1px" ry="1px" width="74" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="640" y="145.3375"><tspan>图形结构</tspan></tspan></text></g></g><g id="4e0959e8d52c"><rect x="529" y="210.046875" rx="1px" ry="1px" width="74" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="538" y="227.18125"><tspan>存储结构</tspan></tspan></text></g></g><g id="d28bd2c93470"><rect x="631" y="160.9375" rx="1px" ry="1px" width="74" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="640" y="178.071875"><tspan>顺序存储</tspan></tspan></text></g></g><g id="0f3cc002d272"><rect x="631" y="193.671875" rx="1px" ry="1px" width="74" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="640" y="210.80625"><tspan>链式存储</tspan></tspan></text></g></g><g id="450bc8651196"><rect x="631" y="226.40625" rx="1px" ry="1px" width="74" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="640" y="243.540625"><tspan>索引存储</tspan></tspan></text></g></g><g id="6dd816b6b86e"><rect x="631" y="259.140625" rx="1px" ry="1px" width="74" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="640" y="276.275"><tspan>散列存储</tspan></tspan></text></g></g><g id="f559359a3714"><rect x="529" y="291.875" rx="1px" ry="1px" width="74" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="538" y="309.009375"><tspan>数据操作</tspan></tspan></text></g></g><g id="0ef58df7aec5"><rect x="631" y="291.875" rx="1px" ry="1px" width="200" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="640" y="309.009375"><tspan>创建、增删改查、遍历、销毁</tspan></tspan></text></g></g><g id="b9884a06305e"><rect x="427" y="340.984375" rx="1px" ry="1px" width="74" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="436" y="358.11875"><tspan>数据抽象</tspan></tspan></text></g></g><g id="9c9ba5aae31d"><rect x="529" y="340.984375" rx="1px" ry="1px" width="81" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="538" y="358.11875"><tspan>JAVA泛型</tspan></tspan></text></g></g><g id="d98686b214f8"><rect x="637.71875" y="324.609375" rx="1px" ry="1px" width="384" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="646.71875" y="341.74375"><tspan>抽象类Object：由继承该抽象类的子类表示抽象类型的实现</tspan></tspan></text></g></g><g id="c2c10c759697"><rect x="637.71875" y="357.34375" rx="1px" ry="1px" width="422" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="646.71875" y="374.478125"><tspan>抽象Comparable接口：由实现该接口的类表示抽象类型的实现。</tspan></tspan></text></g></g><g id="fbd1b776917c"><rect x="427" y="390.078125" rx="1px" ry="1px" width="426" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="436" y="407.2125"><tspan>时间复杂度: 数据元素个数n的多项式的最高次幂的项并去掉其系数</tspan></tspan></text></g></g><g id="dab4557a6eec"><rect x="427" y="422.8125" rx="1px" ry="1px" width="270" height="25" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(102, 102, 102)"><tspan x="436" y="439.946875"><tspan>空间复杂度：算法执行占用的存储空间量</tspan></tspan></text></g></g><g transform="translate(240, 7288)" id="sdjakdjak0"><g id="subline_4158153195da" transform="translate(0.5,-0.5)"><path id="line_ae52be9f326d" d="M 54 2465.5 L 72 2465.5 L 72 2453 A 4 4 0 0 1 76 2449 L 82.00001436121323 2449" p="4158153195da" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_e20f797c811f" d="M 142.00001436121323 2449 L 161 2449 L 161 213 A 4 4 0 0 1 165 209 L 170.00003590303308 209" p="ae52be9f326d" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_55444486ebd1" d="M 216.00003590303308 209 L 235 209 L 235 16 A 4 4 0 0 1 239 12 L 243.99999281939338 12" p="e20f797c811f" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_1477ef716662" d="M 216.00003590303308 209 L 235 209 L 235 49 A 4 4 0 0 1 239 45 L 243.99999281939338 45" p="e20f797c811f" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_0091f84c2821" d="M 216.00003590303308 209 L 235 209 L 235 238 A 4 4 0 0 0 239 242 L 243.99999281939338 242" p="e20f797c811f" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_da1199d32e03" d="M 401.99999281939336 242 L 420 242 L 420 202 A 4 4 0 0 1 424 198 L 430.0000359030331 198" p="0091f84c2821" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_dcc72cdc5e45" d="M 401.99999281939336 242 L 420 242 L 420 376 A 4 4 0 0 0 424 380 L 430.0000359030331 380" p="0091f84c2821" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_6d937ce89033" d="M 142.00001436121323 2449 L 161 2449 L 161 2659 A 4 4 0 0 0 165 2663 L 170.00003590303308 2663" p="ae52be9f326d" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_d92c23936e28" d="M 216.00003590303308 2663 L 235 2663 L 235 947 A 4 4 0 0 1 239 943 L 243.99999281939338 943" p="6d937ce89033" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_dd4dd48f1c6e" d="M 331.99999281939336 943 L 350 943 L 350 551 A 4 4 0 0 1 354 547 L 360.0000359030331 547" p="d92c23936e28" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_32155b058787" d="M 476.0000359030331 547 L 495 547 L 495 547 L 503.9999928193934 547" p="dd4dd48f1c6e" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_d016667d5f54" d="M 331.99999281939336 943 L 350 943 L 350 691 A 4 4 0 0 1 354 687 L 360.0000359030331 687" p="d92c23936e28" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_cea2ebca7f02" d="M 331.99999281939336 943 L 350 943 L 350 724 A 4 4 0 0 1 354 720 L 360.0000359030331 720" p="d92c23936e28" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_1b7f6c64ef27" d="M 331.99999281939336 943 L 350 943 L 350 1095 A 4 4 0 0 0 354 1099 L 360.0000359030331 1099" p="d92c23936e28" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_0937ef432e05" d="M 476.0000359030331 1099 L 495 1099 L 495 890 A 4 4 0 0 1 499 886 L 503.9999928193934 886" p="1b7f6c64ef27" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_d69c25973033" d="M 476.0000359030331 1099 L 495 1099 L 495 1136 A 4 4 0 0 0 499 1140 L 503.9999928193934 1140" p="1b7f6c64ef27" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_2f3e30ae1dd5" d="M 476.0000359030331 1099 L 495 1099 L 495 1348 A 4 4 0 0 0 499 1352 L 503.9999928193934 1352" p="1b7f6c64ef27" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_25b268071411" d="M 216.00003590303308 2663 L 235 2663 L 235 1571 A 4 4 0 0 1 239 1567 L 243.99999281939338 1567" p="6d937ce89033" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_66bbfbeea632" d="M 331.99999281939336 1567 L 350 1567 L 350 1483 A 4 4 0 0 1 354 1479 L 360.0000359030331 1479" p="25b268071411" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_05c88080b391" d="M 331.99999281939336 1567 L 350 1567 L 350 1515 A 4 4 0 0 1 354 1511 L 360.0000359030331 1511" p="25b268071411" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_fffec639181e" d="M 331.99999281939336 1567 L 350 1567 L 350 1596 A 4 4 0 0 0 354 1600 L 360.0000359030331 1600" p="25b268071411" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_6078f99e5683" d="M 216.00003590303308 2663 L 235 2663 L 235 3024 A 4 4 0 0 0 239 3028 L 243.99999281939338 3028" p="6d937ce89033" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_0ff1ccb6c6b9" d="M 337.99999281939336 3028 L 356 3028 L 356 1866 A 4 4 0 0 1 360 1862 L 366.0156609030331 1862" p="6078f99e5683" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_9614e7e773d8" d="M 610.0156609030331 1862 L 629 1862 L 629 1862 L 637.6718678193934 1862" p="0ff1ccb6c6b9" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_49540942f1c3" d="M 337.99999281939336 3028 L 356 3028 L 356 2213 A 4 4 0 0 1 360 2209 L 366.0156609030331 2209" p="6078f99e5683" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_22415dcd7205" d="M 337.99999281939336 3028 L 356 3028 L 356 2608 A 4 4 0 0 1 360 2604 L 366.0156609030331 2604" p="6078f99e5683" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_783616b4b7c9" d="M 337.99999281939336 3028 L 356 3028 L 356 3087 A 4 4 0 0 0 360 3091 L 366.0156609030331 3091" p="6078f99e5683" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_fa5f4735e999" d="M 701.0156609030331 3091 L 720 3091 L 720 3091 L 728.8125071806066 3091" p="783616b4b7c9" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_a82ac8ab8f5e" d="M 1414.8125071806066 3091 L 1433 3091 L 1433 3091 L 1442.8125359030332 3091" p="fa5f4735e999" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_94e82f980f61" d="M 337.99999281939336 3028 L 356 3028 L 356 3590 A 4 4 0 0 0 360 3594 L 366.0156609030331 3594" p="6078f99e5683" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_2a7ea3115156" d="M 435.0156609030331 3594 L 454 3594 L 454 3594 L 462.9687859030331 3594" p="94e82f980f61" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_63c4ea530bb0" d="M 1380.9687859030332 3594 L 1399 3594 L 1399 3594 L 1408.9687571806066 3594" p="2a7ea3115156" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_f7467721a6ba" d="M 337.99999281939336 3028 L 356 3028 L 356 4111 A 4 4 0 0 0 360 4115 L 366.0156609030331 4115" p="6078f99e5683" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_0160af45d74b" d="M 421.0156609030331 4115 L 440 4115 L 440 3913 A 4 4 0 0 1 444 3909 L 449.3281465418199 3909" p="f7467721a6ba" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_fdc92b12e4e0" d="M 579.3281465418199 3909 L 598 3909 L 598 3909 L 607.3281321806066 3909" p="0160af45d74b" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_6cfff41a627e" d="M 421.0156609030331 4115 L 440 4115 L 440 4174 A 4 4 0 0 0 444 4178 L 449.3281465418199 4178" p="f7467721a6ba" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_a0592fe4ba84" d="M 1367.32814654182 4178 L 1386 4178 L 1386 4178 L 1395.3281896254596 4178" p="6cfff41a627e" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_ec92830f1639" d="M 2145.3281896254593 4178 L 2164 4178 L 2164 4178 L 2173.3282470703125 4178" p="a0592fe4ba84" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_bb0c6f6a9c0e" d="M 216.00003590303308 2663 L 235 2663 L 235 4639 A 4 4 0 0 0 239 4643 L 243.99999281939338 4643" p="6d937ce89033" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_305c7953b2ca" d="M 429.99999281939336 4643 L 448 4643 L 448 4548 A 4 4 0 0 1 452 4544 L 458.0000215418199 4544" p="bb0c6f6a9c0e" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_260682c957b8" d="M 532.0000215418199 4544 L 551 4544 L 551 4412 A 4 4 0 0 1 555 4408 L 560.0000359030331 4408" p="305c7953b2ca" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_270e71ade779" d="M 648.0000359030331 4408 L 667 4408 L 667 4408 L 676.0000071806066 4408" p="260682c957b8" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_153aa69bedbb" d="M 532.0000215418199 4544 L 551 4544 L 551 4462 A 4 4 0 0 1 555 4458 L 560.0000359030331 4458" p="305c7953b2ca" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_34ce538d9f31" d="M 648.0000359030331 4458 L 667 4458 L 667 4458 L 676.0000071806066 4458" p="153aa69bedbb" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_5afc644116f4" d="M 532.0000215418199 4544 L 551 4544 L 551 4522 A 4 4 0 0 1 555 4518 L 560.0000359030331 4518" p="305c7953b2ca" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_c3ad0f3aba3a" d="M 648.0000359030331 4518 L 667 4518 L 667 4518 L 676.0000071806066 4518" p="5afc644116f4" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_3f7b60214b17" d="M 532.0000215418199 4544 L 551 4544 L 551 4573 A 4 4 0 0 0 555 4577 L 560.0000359030331 4577" p="305c7953b2ca" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_a44713131352" d="M 648.0000359030331 4577 L 667 4577 L 667 4577 L 676.0000071806066 4577" p="3f7b60214b17" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_fb360bdc8963" d="M 532.0000215418199 4544 L 551 4544 L 551 4633 A 4 4 0 0 0 555 4637 L 560.0000359030331 4637" p="305c7953b2ca" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_e8616e6c7d02" d="M 620.0000359030331 4637 L 639 4637 L 639 4637 L 648.0000215418198 4637" p="fb360bdc8963" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_3b8080955fef" d="M 532.0000215418199 4544 L 551 4544 L 551 4684 A 4 4 0 0 0 555 4688 L 560.0000359030331 4688" p="305c7953b2ca" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_1eb8dc424026" d="M 634.0000359030331 4688 L 653 4688 L 653 4688 L 661.9999784581802 4688" p="3b8080955fef" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_8216e6f38875" d="M 429.99999281939336 4643 L 448 4643 L 448 4774 A 4 4 0 0 0 452 4778 L 458.0000215418199 4778" p="bb0c6f6a9c0e" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_c8b493e06ecb" d="M 532.0000215418199 4778 L 551 4778 L 551 4725 A 4 4 0 0 1 555 4721 L 560.0000359030331 4721" p="8216e6f38875" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_125f4f8ebef4" d="M 532.0000215418199 4778 L 551 4778 L 551 4766 A 4 4 0 0 1 555 4762 L 560.0000359030331 4762" p="8216e6f38875" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_459e2e55dbb4" d="M 718.0000359030331 4762 L 737 4762 L 737 4762 L 746.0000071806066 4762" p="125f4f8ebef4" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_0e12fc66ed0b" d="M 532.0000215418199 4778 L 551 4778 L 551 4800 A 4 4 0 0 0 555 4804 L 560.0000359030331 4804" p="8216e6f38875" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_3dd0bf92bacf" d="M 662.0000359030331 4804 L 681 4804 L 681 4804 L 690.0000359030331 4804" p="0e12fc66ed0b" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_98c9ec547def" d="M 532.0000215418199 4778 L 551 4778 L 551 4832 A 4 4 0 0 0 555 4836 L 560.0000359030331 4836" p="8216e6f38875" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_ad1140bb5522" d="M 429.99999281939336 4643 L 448 4643 L 448 4873 A 4 4 0 0 0 452 4877 L 458.0000215418199 4877" p="bb0c6f6a9c0e" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_ba85076c56e5" d="M 54 2465.5 L 72 2465.5 L 72 4915 A 4 4 0 0 0 76 4919 L 82.00001436121323 4919" p="4158153195da" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_94d35aee1e0d" d="M 209.00001436121323 4919 L 228 4919 L 228 4919 L 237.12499281939338 4919" p="ba85076c56e5" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path></g><g transform="translate(0.5,0)"></g><g class="svg-summary-con" transform="translate(0.5,0.5)"></g></g><g transform="translate(240, 6402)" id="sdjakdjak1"><g id="subline_6c6b113a34ac" transform="translate(0.5,-0.5)"><path id="line_9a2bb3419444" d="M 54 429.5 L 72 429.5 L 72 16 A 4 4 0 0 1 76 12 L 81.99998121995192 12" p="6c6b113a34ac" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_cce00ba508ba" d="M 54 429.5 L 72 429.5 L 72 49 A 4 4 0 0 1 76 45 L 81.99998121995192 45" p="6c6b113a34ac" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_1b39e2a11e2c" d="M 54 429.5 L 72 429.5 L 72 98 A 4 4 0 0 1 76 94 L 81.99998121995192 94" p="6c6b113a34ac" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_33fa3ac69e2b" d="M 155.9999812199519 94 L 174 94 L 174 81 A 4 4 0 0 1 178 77 L 183.99996243990384 77" p="1b39e2a11e2c" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_6e226f00951c" d="M 155.9999812199519 94 L 174 94 L 174 106 A 4 4 0 0 0 178 110 L 183.99996243990384 110" p="1b39e2a11e2c" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_fd3bb0718342" d="M 54 429.5 L 72 429.5 L 72 147 A 4 4 0 0 1 76 143 L 81.99998121995192 143" p="6c6b113a34ac" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_d93fd253d90f" d="M 54 429.5 L 72 429.5 L 72 265 A 4 4 0 0 1 76 261 L 81.99998121995192 261" p="6c6b113a34ac" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_805462badf04" d="M 141.9999812199519 261 L 160 261 L 160 261 L 170 261" p="d93fd253d90f" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_56227459d414" d="M 54 429.5 L 72 429.5 L 72 384 A 4 4 0 0 1 76 380 L 81.99998121995192 380" p="6c6b113a34ac" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_4290ce40fb7b" d="M 155.9999812199519 380 L 174 380 L 174 380 L 183.99996243990384 380" p="56227459d414" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_11b6d8aaeb4e" d="M 54 429.5 L 72 429.5 L 72 626 A 4 4 0 0 0 76 630 L 81.99998121995192 630" p="6c6b113a34ac" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path></g><g transform="translate(0.5,0)"></g><g class="svg-summary-con" transform="translate(0.5,0.5)"></g></g><g transform="translate(240, 5663)" id="sdjakdjak2"><g id="subline_3de94eb231c9" transform="translate(0.5,-0.5)"><path id="line_3a7b476e2ba8" d="M 44 356 L 62 356 L 62 25 A 4 4 0 0 1 66 21 L 72 21" p="3de94eb231c9" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_2ba5fe891e5f" d="M 44 356 L 62 356 L 62 98 A 4 4 0 0 1 66 94 L 72 94" p="3de94eb231c9" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_4d858cd37215" d="M 146 94 L 164 94 L 164 66 A 4 4 0 0 1 168 62 L 174 62" p="2ba5fe891e5f" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_1872e811055c" d="M 248 62 L 266 62 L 266 62 L 276 62" p="4d858cd37215" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_db842ed6d555" d="M 146 94 L 164 94 L 164 94 L 174 94" p="2ba5fe891e5f" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_cdd0199c12a8" d="M 234 94 L 252 94 L 252 94 L 262 94" p="db842ed6d555" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_96dab3a73ac2" d="M 146 94 L 164 94 L 164 123 A 4 4 0 0 0 168 127 L 174 127" p="2ba5fe891e5f" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_09e14e8c958c" d="M 44 356 L 62 356 L 62 233 A 4 4 0 0 1 66 229 L 72 229" p="3de94eb231c9" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_35616bc51852" d="M 347 229 L 365 229 L 365 229 L 375 229" p="09e14e8c958c" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_0cf9ea01242b" d="M 44 356 L 62 356 L 62 356 L 72 356" p="3de94eb231c9" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_4695ca26a28e" d="M 118 356 L 136 356 L 136 356 L 146 356" p="0cf9ea01242b" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_191625d5d57b" d="M 44 356 L 62 356 L 62 455 A 4 4 0 0 0 66 459 L 72 459" p="3de94eb231c9" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_76ab77588561" d="M 160 459 L 178 459 L 178 422 A 4 4 0 0 1 182 418 L 188 418" p="191625d5d57b" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_2b2f9dd4c6e2" d="M 160 459 L 178 459 L 178 455 A 4 4 0 0 1 182 451 L 188 451" p="191625d5d57b" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_e12307c54b6d" d="M 160 459 L 178 459 L 178 488 A 4 4 0 0 0 182 492 L 188 492" p="191625d5d57b" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_0b6fca15db9d" d="M 44 356 L 62 356 L 62 580 A 4 4 0 0 0 66 584 L 72 584" p="3de94eb231c9" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_9548907221e5" d="M 146 584 L 164 584 L 164 555 A 4 4 0 0 1 168 551 L 174 551" p="0b6fca15db9d" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_4d0a858afe83" d="M 1092 551 L 1110 551 L 1110 539 A 4 4 0 0 1 1114 535 L 1120 535" p="9548907221e5" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_affeceb3622d" d="M 1092 551 L 1110 551 L 1110 564 A 4 4 0 0 0 1114 568 L 1120 568" p="9548907221e5" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_faaf6c37bda5" d="M 146 584 L 164 584 L 164 598 A 4 4 0 0 0 168 602 L 174 602" p="0b6fca15db9d" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_dd67f86adf7a" d="M 146 584 L 164 584 L 164 631 A 4 4 0 0 0 168 635 L 174 635" p="0b6fca15db9d" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_67390dd14e91" d="M 44 356 L 62 356 L 62 680 A 4 4 0 0 0 66 684 L 72 684" p="3de94eb231c9" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_0a5a33d6695a" d="M 216 684 L 234 684 L 234 672 A 4 4 0 0 1 238 668 L 244 668" p="67390dd14e91" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_c20e979d1a45" d="M 216 684 L 234 684 L 234 697 A 4 4 0 0 0 238 701 L 244 701" p="67390dd14e91" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path></g><g transform="translate(0.5,0)"></g><g class="svg-summary-con" transform="translate(0.5,0.5)"></g></g><g transform="translate(240, 3119)" id="sdjakdjak3"><g id="subline_d59f472a9fc3" transform="translate(0.5,-0.5)"><path id="line_12765db13bfa" d="M 84 1258.5 L 102 1258.5 L 102 44 A 4 4 0 0 1 106 40 L 112.00001436121323 40" p="d59f472a9fc3" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_03e5ade71e9c" d="M 84 1258.5 L 102 1258.5 L 102 1068 A 4 4 0 0 1 106 1064 L 112.00001436121323 1064" p="d59f472a9fc3" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_ccc7f563b7b7" d="M 172.00001436121323 1064 L 191 1064 L 191 145 A 4 4 0 0 1 195 141 L 200.00003590303308 141" p="03e5ade71e9c" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_3d867bbaa0c3" d="M 274.0000359030331 141 L 293 141 L 293 104 A 4 4 0 0 1 297 100 L 301.9999784581802 100" p="ccc7f563b7b7" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_dc3cf1fbb6ad" d="M 274.0000359030331 141 L 293 141 L 293 154 A 4 4 0 0 0 297 158 L 301.9999784581802 158" p="ccc7f563b7b7" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_6ad26daa2776" d="M 375.9999784581802 158 L 394 158 L 394 145 A 4 4 0 0 1 398 141 L 403.9999928193934 141" p="dc3cf1fbb6ad" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_2aa802bf8e3a" d="M 375.9999784581802 158 L 394 158 L 394 179 A 4 4 0 0 0 398 183 L 403.9999928193934 183" p="dc3cf1fbb6ad" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_364e6a678e07" d="M 172.00001436121323 1064 L 191 1064 L 191 582 A 4 4 0 0 1 195 578 L 200.00003590303308 578" p="03e5ade71e9c" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_8a19d2ccce6f" d="M 274.0000359030331 578 L 293 578 L 293 398 A 4 4 0 0 1 297 394 L 301.9999784581802 394" p="364e6a678e07" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_e2b8d6cef94f" d="M 347.9999784581802 394 L 366 394 L 366 219 A 4 4 0 0 1 370 215 L 376.00000718060664 215" p="8a19d2ccce6f" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_ae476cd71db5" d="M 347.9999784581802 394 L 366 394 L 366 252 A 4 4 0 0 1 370 248 L 376.00000718060664 248" p="8a19d2ccce6f" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_6f089fd1e15f" d="M 347.9999784581802 394 L 366 394 L 366 285 A 4 4 0 0 1 370 281 L 376.00000718060664 281" p="8a19d2ccce6f" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_74f3a92d6ff6" d="M 347.9999784581802 394 L 366 394 L 366 318 A 4 4 0 0 1 370 314 L 376.00000718060664 314" p="8a19d2ccce6f" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_8c87b63cf679" d="M 347.9999784581802 394 L 366 394 L 366 456 A 4 4 0 0 0 370 460 L 376.00000718060664 460" p="8a19d2ccce6f" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_2c2036a184cc" d="M 274.0000359030331 578 L 293 578 L 293 770 A 4 4 0 0 0 297 774 L 301.9999784581802 774" p="364e6a678e07" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_54ae81c8a124" d="M 361.9999784581802 774 L 380 774 L 380 610 A 4 4 0 0 1 384 606 L 390.0000359030331 606" p="2c2036a184cc" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_43d52e17f07a" d="M 361.9999784581802 774 L 380 774 L 380 786 A 4 4 0 0 0 384 790 L 390.0000359030331 790" p="2c2036a184cc" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_ce01a03da556" d="M 744.0000359030331 790 L 763 790 L 763 680 A 4 4 0 0 1 767 676 L 771.9999784581802 676" p="43d52e17f07a" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_35f4d2d92a5f" d="M 744.0000359030331 790 L 763 790 L 763 787 A 4 4 0 0 1 767 783 L 771.9999784581802 783" p="43d52e17f07a" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_88803cee04c5" d="M 744.0000359030331 790 L 763 790 L 763 849 A 4 4 0 0 0 767 853 L 771.9999784581802 853" p="43d52e17f07a" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_a35ae37d9dc8" d="M 744.0000359030331 790 L 763 790 L 763 909 A 4 4 0 0 0 767 913 L 771.9999784581802 913" p="43d52e17f07a" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_80d8c9eec2b3" d="M 172.00001436121323 1064 L 191 1064 L 191 1010 A 4 4 0 0 1 195 1006 L 200.00003590303308 1006" p="03e5ade71e9c" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_a89fc531fe7e" d="M 316.0000359030331 1006 L 335 1006 L 335 978 A 4 4 0 0 1 339 974 L 343.9999928193934 974" p="80d8c9eec2b3" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_4556cb0371c8" d="M 316.0000359030331 1006 L 335 1006 L 335 1006 L 343.9999928193934 1006" p="80d8c9eec2b3" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_14ab34cd75c4" d="M 316.0000359030331 1006 L 335 1006 L 335 1035 A 4 4 0 0 0 339 1039 L 343.9999928193934 1039" p="80d8c9eec2b3" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_5664a7cfebfe" d="M 172.00001436121323 1064 L 191 1064 L 191 1248 A 4 4 0 0 0 195 1252 L 200.00003590303308 1252" p="03e5ade71e9c" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_28646325ef1d" d="M 302.0000359030331 1252 L 321 1252 L 321 1240 A 4 4 0 0 1 325 1236 L 330.0000359030331 1236" p="5664a7cfebfe" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_0827b9cb0b66" d="M 852.0000359030331 1236 L 871 1236 L 871 1236 L 880.0000359030331 1236" p="28646325ef1d" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_dc9f44b23cb4" d="M 302.0000359030331 1252 L 321 1252 L 321 1429 A 4 4 0 0 0 325 1433 L 330.0000359030331 1433" p="5664a7cfebfe" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_431654fabcc8" d="M 172.00001436121323 1064 L 191 1064 L 191 1512 A 4 4 0 0 0 195 1516 L 200.00003590303308 1516" p="03e5ade71e9c" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_732bcbef94a2" d="M 554.0000359030331 1516 L 573 1516 L 573 1488 A 4 4 0 0 1 577 1484 L 581.9999784581802 1484" p="431654fabcc8" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_4f4c1e21beb9" d="M 554.0000359030331 1516 L 573 1516 L 573 1531 A 4 4 0 0 0 577 1535 L 581.9999784581802 1535" p="431654fabcc8" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_5340c2eea22f" d="M 554.0000359030331 1516 L 573 1516 L 573 1563 A 4 4 0 0 0 577 1567 L 581.9999784581802 1567" p="431654fabcc8" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_8dc552d7edfb" d="M 172.00001436121323 1064 L 191 1064 L 191 1810 A 4 4 0 0 0 195 1814 L 200.00003590303308 1814" p="03e5ade71e9c" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_2c07f9342c72" d="M 386.0000359030331 1814 L 405 1814 L 405 1660 A 4 4 0 0 1 409 1656 L 413.9999928193934 1656" p="8dc552d7edfb" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_d6e82213ab7f" d="M 386.0000359030331 1814 L 405 1814 L 405 1749 A 4 4 0 0 1 409 1745 L 413.9999928193934 1745" p="8dc552d7edfb" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_02ca25d919f5" d="M 386.0000359030331 1814 L 405 1814 L 405 1874 A 4 4 0 0 0 409 1878 L 413.9999928193934 1878" p="8dc552d7edfb" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_a307db2c9cf0" d="M 386.0000359030331 1814 L 405 1814 L 405 2015 A 4 4 0 0 0 409 2019 L 413.9999928193934 2019" p="8dc552d7edfb" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_9c7058ac11be" d="M 84 1258.5 L 102 1258.5 L 102 2262 A 4 4 0 0 0 106 2266 L 112.00001436121323 2266" p="d59f472a9fc3" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_4fd1ef5a9366" d="M 186.00001436121323 2266 L 205 2266 L 205 2065 A 4 4 0 0 1 209 2061 L 213.99999281939338 2061" p="9c7058ac11be" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_1e09d4a2b239" d="M 186.00001436121323 2266 L 205 2266 L 205 2097 A 4 4 0 0 1 209 2093 L 213.99999281939338 2093" p="9c7058ac11be" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_4a73cb17a3d5" d="M 186.00001436121323 2266 L 205 2266 L 205 2130 A 4 4 0 0 1 209 2126 L 213.99999281939338 2126" p="9c7058ac11be" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_0fbb3f49dca4" d="M 186.00001436121323 2266 L 205 2266 L 205 2311 A 4 4 0 0 0 209 2315 L 213.99999281939338 2315" p="9c7058ac11be" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_5873c0388fd2" d="M 84 1258.5 L 102 1258.5 L 102 2501 A 4 4 0 0 0 106 2505 L 112.00001436121323 2505" p="d59f472a9fc3" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path></g><g transform="translate(0.5,0)"></g><g class="svg-summary-con" transform="translate(0.5,0.5)"></g></g><g transform="translate(240, 2141)" id="sdjakdjak4"><g id="subline_6846c4174724" transform="translate(0.5,-0.5)"><path id="line_c292c7de9ec7" d="M 84 476 L 102 476 L 102 176 A 4 4 0 0 1 106 172 L 112 172" p="6846c4174724" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_609476775042" d="M 435 172 L 453 172 L 453 25 A 4 4 0 0 1 457 21 L 462.71875 21" p="c292c7de9ec7" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_693e1890d98d" d="M 435 172 L 453 172 L 453 82 A 4 4 0 0 1 457 78 L 462.71875 78" p="c292c7de9ec7" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_2997e6a666bf" d="M 522.71875 78 L 541 78 L 541 66 A 4 4 0 0 1 545 62 L 550.71875 62" p="693e1890d98d" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_e6262966ee75" d="M 522.71875 78 L 541 78 L 541 91 A 4 4 0 0 0 545 95 L 550.71875 95" p="693e1890d98d" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_439acdee94d9" d="M 435 172 L 453 172 L 453 169 A 4 4 0 0 1 457 165 L 462.71875 165" p="c292c7de9ec7" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_3a35ab8dcef0" d="M 508.71875 165 L 527 165 L 527 165 L 536.71875 165" p="439acdee94d9" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_07ff580a1f70" d="M 435 172 L 453 172 L 453 280 A 4 4 0 0 0 457 284 L 462.71875 284" p="c292c7de9ec7" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_2a7619c3484d" d="M 690.71875 284 L 709 284 L 709 271 A 4 4 0 0 1 713 267 L 718.71875 267" p="07ff580a1f70" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_fd908ee23fbb" d="M 815.71875 267 L 834 267 L 834 238 A 4 4 0 0 1 838 234 L 843.34375 234" p="2a7619c3484d" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_fd5b4c803817" d="M 815.71875 267 L 834 267 L 834 267 L 843.34375 267" p="2a7619c3484d" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_58276fa3f2fd" d="M 815.71875 267 L 834 267 L 834 296 A 4 4 0 0 0 838 300 L 843.34375 300" p="2a7619c3484d" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_c3be2ddaf510" d="M 690.71875 284 L 709 284 L 709 329 A 4 4 0 0 0 713 333 L 718.71875 333" p="07ff580a1f70" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_125c36d1bf41" d="M 767.71875 333 L 786 333 L 786 333 L 795.859375 333" p="c3be2ddaf510" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_804a78e0bae7" d="M 84 476 L 102 476 L 102 648 A 4 4 0 0 0 106 652 L 112 652" p="6846c4174724" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_180c46dc815b" d="M 461 652 L 479 652 L 479 369 A 4 4 0 0 1 483 365 L 488.640625 365" p="804a78e0bae7" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_6fa2b3646ce3" d="M 461 652 L 479 652 L 479 402 A 4 4 0 0 1 483 398 L 488.640625 398" p="804a78e0bae7" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_17f0736a185a" d="M 461 652 L 479 652 L 479 451 A 4 4 0 0 1 483 447 L 488.640625 447" p="804a78e0bae7" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_477c2c07e8bb" d="M 534.640625 447 L 553 447 L 553 435 A 4 4 0 0 1 557 431 L 562.640625 431" p="17f0736a185a" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_bc5c5dcdc79d" d="M 534.640625 447 L 553 447 L 553 460 A 4 4 0 0 0 557 464 L 562.640625 464" p="17f0736a185a" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_51df1afe7e01" d="M 461 652 L 479 652 L 479 689 A 4 4 0 0 0 483 693 L 488.640625 693" p="804a78e0bae7" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_02e269e4b9bf" d="M 632.640625 693 L 651 693 L 651 500 A 4 4 0 0 1 655 496 L 660.640625 496" p="51df1afe7e01" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_24b012970c7b" d="M 632.640625 693 L 651 693 L 651 549 A 4 4 0 0 1 655 545 L 660.640625 545" p="51df1afe7e01" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_e4a6882edb1c" d="M 804.640625 545 L 823 545 L 823 533 A 4 4 0 0 1 827 529 L 832.640625 529" p="24b012970c7b" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_2baac2112ebc" d="M 804.640625 545 L 823 545 L 823 558 A 4 4 0 0 0 827 562 L 832.640625 562" p="24b012970c7b" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_6724014aaf27" d="M 632.640625 693 L 651 693 L 651 599 A 4 4 0 0 1 655 595 L 660.640625 595" p="51df1afe7e01" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_8f8affefafdb" d="M 632.640625 693 L 651 693 L 651 631 A 4 4 0 0 1 655 627 L 660.640625 627" p="51df1afe7e01" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_79b869e0a74c" d="M 632.640625 693 L 651 693 L 651 770 A 4 4 0 0 0 655 774 L 660.640625 774" p="51df1afe7e01" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_6009101471b5" d="M 804.640625 774 L 823 774 L 823 664 A 4 4 0 0 1 827 660 L 832.640625 660" p="79b869e0a74c" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_68349bec4586" d="M 804.640625 774 L 823 774 L 823 774 L 832.640625 774" p="79b869e0a74c" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_29101d39f670" d="M 934.640625 774 L 953 774 L 953 697 A 4 4 0 0 1 957 693 L 962.640625 693" p="68349bec4586" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_4588bfcd4b5e" d="M 934.640625 774 L 953 774 L 953 787 A 4 4 0 0 0 957 791 L 962.640625 791" p="68349bec4586" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_0da8122a0afc" d="M 1050.640625 791 L 1069 791 L 1069 729 A 4 4 0 0 1 1073 725 L 1078.640625 725" p="4588bfcd4b5e" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_fe28e3af9017" d="M 1050.640625 791 L 1069 791 L 1069 762 A 4 4 0 0 1 1073 758 L 1078.640625 758" p="4588bfcd4b5e" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_db9863152196" d="M 1050.640625 791 L 1069 791 L 1069 791 L 1078.640625 791" p="4588bfcd4b5e" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_74d9e1946fe2" d="M 1050.640625 791 L 1069 791 L 1069 820 A 4 4 0 0 0 1073 824 L 1078.640625 824" p="4588bfcd4b5e" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_d70736222f08" d="M 1050.640625 791 L 1069 791 L 1069 852 A 4 4 0 0 0 1073 856 L 1078.640625 856" p="4588bfcd4b5e" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_0063c52f7abc" d="M 804.640625 774 L 823 774 L 823 885 A 4 4 0 0 0 827 889 L 832.640625 889" p="79b869e0a74c" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_d744bbf6cff0" d="M 461 652 L 479 652 L 479 926 A 4 4 0 0 0 483 930 L 488.640625 930" p="804a78e0bae7" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path></g><g transform="translate(0.5,0)"></g><g class="svg-summary-con" transform="translate(0.5,0.5)"></g></g><g transform="translate(240, 1250)" id="sdjakdjak5"><g id="subline_e3399a1e874b" transform="translate(0.5,-0.5)"><path id="line_cd538b67d1ee" d="M 84 433 L 102 433 L 102 16 A 4 4 0 0 1 106 12 L 112 12" p="e3399a1e874b" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_a84ce9de3f61" d="M 84 433 L 102 433 L 102 169 A 4 4 0 0 1 106 165 L 112 165" p="e3399a1e874b" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_795e313dc9e1" d="M 150 165 L 168 165 L 168 67 A 4 4 0 0 1 172 63 L 178 63" p="a84ce9de3f61" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_7f24ff5beba6" d="M 150 165 L 168 165 L 168 134 A 4 4 0 0 1 172 130 L 178 130" p="a84ce9de3f61" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_f9a67e3c8efd" d="M 238 130 L 256 130 L 256 118 A 4 4 0 0 1 260 114 L 266 114" p="7f24ff5beba6" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_abc082e31c02" d="M 312 114 L 330 114 L 330 114 L 340 114" p="f9a67e3c8efd" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_0d3bddb4d235" d="M 238 130 L 256 130 L 256 142 A 4 4 0 0 0 260 146 L 266 146" p="7f24ff5beba6" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_fa813a5f9a61" d="M 368 146 L 386 146 L 386 146 L 396 146" p="0d3bddb4d235" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_7bf33c0f983d" d="M 150 165 L 168 165 L 168 228 A 4 4 0 0 0 172 232 L 178 232" p="a84ce9de3f61" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_1d9de4cf596f" d="M 224 232 L 242 232 L 242 220 A 4 4 0 0 1 246 216 L 252 216" p="7bf33c0f983d" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_cf002f451550" d="M 224 232 L 242 232 L 242 282 A 4 4 0 0 0 246 286 L 252 286" p="7bf33c0f983d" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_58c0598bf247" d="M 84 433 L 102 433 L 102 565 A 4 4 0 0 0 106 569 L 112 569" p="e3399a1e874b" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_992bea547d79" d="M 158 569 L 176 569 L 176 350 A 4 4 0 0 1 180 346 L 186 346" p="58c0598bf247" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_713bd18bf52f" d="M 158 569 L 176 569 L 176 411 A 4 4 0 0 1 180 407 L 186 407" p="58c0598bf247" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_b23b7e88cf20" d="M 260 407 L 278 407 L 278 407 L 288 407" p="713bd18bf52f" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_60629a240dfb" d="M 158 569 L 176 569 L 176 460 A 4 4 0 0 1 180 456 L 186 456" p="58c0598bf247" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_d17060d861c8" d="M 288 456 L 306 456 L 306 444 A 4 4 0 0 1 310 440 L 316 440" p="60629a240dfb" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_f160c3da83a6" d="M 288 456 L 306 456 L 306 468 A 4 4 0 0 0 310 472 L 316 472" p="60629a240dfb" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_c2ddf76c451e" d="M 158 569 L 176 569 L 176 543 A 4 4 0 0 1 180 539 L 186 539" p="58c0598bf247" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_9f077e9b59b2" d="M 246 539 L 264 539 L 264 527 A 4 4 0 0 1 268 523 L 274 523" p="c2ddf76c451e" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_31bc03c7df9b" d="M 246 539 L 264 539 L 264 570 A 4 4 0 0 0 268 574 L 274 574" p="c2ddf76c451e" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_c8c678890f9d" d="M 158 569 L 176 569 L 176 665 A 4 4 0 0 0 180 669 L 186 669" p="58c0598bf247" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_7387d6449ea1" d="M 484 669 L 502 669 L 502 638 A 4 4 0 0 1 506 634 L 512 634" p="c8c678890f9d" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_f59f93f483cf" d="M 484 669 L 502 669 L 502 709 A 4 4 0 0 0 506 713 L 512 713" p="c8c678890f9d" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_66655e1a18b2" d="M 158 569 L 176 569 L 176 787 A 4 4 0 0 0 180 791 L 186 791" p="58c0598bf247" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_7f992a1746d8" d="M 260 791 L 278 791 L 278 791 L 288 791" p="66655e1a18b2" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_139d14dc974c" d="M 84 433 L 102 433 L 102 848 A 4 4 0 0 0 106 852 L 112 852" p="e3399a1e874b" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_e8467796d29f" d="M 228 852 L 246 852 L 246 852 L 256 852" p="139d14dc974c" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path></g><g transform="translate(0.5,0)"></g><g class="svg-summary-con" transform="translate(0.5,0.5)"></g></g><g transform="translate(240, 474)" id="sdjakdjak6"><g id="subline_b0d629516b24" transform="translate(0.5,-0.5)"><path id="line_5ba77b6d511e" d="M 69 374.5 L 87 374.5 L 87 16 A 4 4 0 0 1 91 12 L 97.00002817007211 12" p="b0d629516b24" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_9210123a191e" d="M 199.0000281700721 12 L 218 12 L 218 12 L 227.0000281700721 12" p="5ba77b6d511e" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_80c19914f1e3" d="M 69 374.5 L 87 374.5 L 87 86 A 4 4 0 0 1 91 82 L 97.00002817007211 82" p="b0d629516b24" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_e9c14b33e8a6" d="M 241.0000281700721 82 L 260 82 L 260 82 L 269.00000939002405 82" p="80c19914f1e3" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_4b97236b2b29" d="M 69 374.5 L 87 374.5 L 87 313 A 4 4 0 0 1 91 309 L 97.00002817007211 309" p="b0d629516b24" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_3ed33324551d" d="M 241.0000281700721 309 L 260 309 L 260 174 A 4 4 0 0 1 264 170 L 269.00000939002405 170" p="4b97236b2b29" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_cfd8e72c6a6c" d="M 651.000009390024 170 L 670 170 L 670 170 L 679.000009390024 170" p="3ed33324551d" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_687cba10d3dc" d="M 241.0000281700721 309 L 260 309 L 260 225 A 4 4 0 0 1 264 221 L 269.00000939002405 221" p="4b97236b2b29" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_489d85c3a37b" d="M 343.00000939002405 221 L 362 221 L 362 221 L 370.99999060997595 221" p="687cba10d3dc" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_9d620ef10993" d="M 241.0000281700721 309 L 260 309 L 260 266 A 4 4 0 0 1 264 262 L 269.00000939002405 262" p="4b97236b2b29" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_f3a87bbccc8d" d="M 343.00000939002405 262 L 362 262 L 362 262 L 370.99999060997595 262" p="9d620ef10993" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_c0484a6b9bf7" d="M 241.0000281700721 309 L 260 309 L 260 381 A 4 4 0 0 0 264 385 L 269.00000939002405 385" p="4b97236b2b29" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_ddcfca264c58" d="M 413.00000939002405 385 L 432 385 L 432 335 A 4 4 0 0 1 436 331 L 440.99999060997595 331" p="c0484a6b9bf7" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_d3c8b27aae40" d="M 413.00000939002405 385 L 432 385 L 432 424 A 4 4 0 0 0 436 428 L 440.99999060997595 428" p="c0484a6b9bf7" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_e8e4584a9ec4" d="M 69 374.5 L 87 374.5 L 87 613 A 4 4 0 0 0 91 617 L 97.00002817007211 617" p="b0d629516b24" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_6571c33694bd" d="M 176.0000281700721 617 L 195 617 L 195 617 L 204.2656531700721 617" p="e8e4584a9ec4" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path></g><g transform="translate(0.5,0)"></g><g class="svg-summary-con" transform="translate(0.5,0.5)"></g></g><g transform="translate(240, 30)" id="sdjakdjak7"><g id="subline_32ab6a28625f" transform="translate(0.5,-0.5)"><path id="line_32d6556c672c" d="M 159 209 L 177 209 L 177 147 A 4 4 0 0 1 181 143 L 187 143" p="32ab6a28625f" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_1e9caacc8361" d="M 261 143 L 279 143 L 279 65 A 4 4 0 0 1 283 61 L 289 61" p="32d6556c672c" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_b1a230433baa" d="M 363 61 L 381 61 L 381 16 A 4 4 0 0 1 385 12 L 391 12" p="1e9caacc8361" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_b0a64da91353" d="M 363 61 L 381 61 L 381 49 A 4 4 0 0 1 385 45 L 391 45" p="1e9caacc8361" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_e99fc74cac52" d="M 363 61 L 381 61 L 381 73 A 4 4 0 0 0 385 77 L 391 77" p="1e9caacc8361" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_76869f8f51c5" d="M 363 61 L 381 61 L 381 106 A 4 4 0 0 0 385 110 L 391 110" p="1e9caacc8361" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_4e0959e8d52c" d="M 261 143 L 279 143 L 279 188 A 4 4 0 0 0 283 192 L 289 192" p="32d6556c672c" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_d28bd2c93470" d="M 363 192 L 381 192 L 381 147 A 4 4 0 0 1 385 143 L 391 143" p="4e0959e8d52c" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_0f3cc002d272" d="M 363 192 L 381 192 L 381 180 A 4 4 0 0 1 385 176 L 391 176" p="4e0959e8d52c" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_450bc8651196" d="M 363 192 L 381 192 L 381 204 A 4 4 0 0 0 385 208 L 391 208" p="4e0959e8d52c" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_6dd816b6b86e" d="M 363 192 L 381 192 L 381 237 A 4 4 0 0 0 385 241 L 391 241" p="4e0959e8d52c" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_f559359a3714" d="M 261 143 L 279 143 L 279 270 A 4 4 0 0 0 283 274 L 289 274" p="32d6556c672c" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_0ef58df7aec5" d="M 363 274 L 381 274 L 381 274 L 391 274" p="f559359a3714" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_b9884a06305e" d="M 159 209 L 177 209 L 177 319 A 4 4 0 0 0 181 323 L 187 323" p="32ab6a28625f" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_9c9ba5aae31d" d="M 261 323 L 279 323 L 279 323 L 289 323" p="b9884a06305e" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_d98686b214f8" d="M 370 323 L 388 323 L 388 311 A 4 4 0 0 1 392 307 L 397.71875 307" p="9c9ba5aae31d" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_c2c10c759697" d="M 370 323 L 388 323 L 388 335 A 4 4 0 0 0 392 339 L 397.71875 339" p="9c9ba5aae31d" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_fbd1b776917c" d="M 159 209 L 177 209 L 177 368 A 4 4 0 0 0 181 372 L 187 372" p="32ab6a28625f" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_dab4557a6eec" d="M 159 209 L 177 209 L 177 401 A 4 4 0 0 0 181 405 L 187 405" p="32ab6a28625f" stroke="#000000" fill="none" stroke-linecap="square" stroke-width="1"></path></g><g transform="translate(0.5,0)"></g><g class="svg-summary-con" transform="translate(0.5,0.5)"></g></g><g transform="translate(30, 6094.5)" id="sdjakdjak8"><g id="subline_root" transform="translate(0.5,-0.5)"></g><g transform="translate(0.5,0)"></g><g class="svg-summary-con" transform="translate(0.5,0.5)"></g></g><g id="root"><rect x="30" y="6094.5" rx="5px" ry="5px" width="130" height="61" style="fill: #C40A0A; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="25px" font-weight="normal" fill="rgb(255, 255, 255)"><tspan x="45" y="6133.25"><tspan>数据结构</tspan></tspan></text></g></g></svg>