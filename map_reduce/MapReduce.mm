<map version="1.0.1"><node CREATED="1620645903921" ID="ID_root" MODIFIED="1620645903921" TEXT="MapReduce"><node CREATED="1620645903921" ID="ID_ac1321bdd87a" POSITION="right" MODIFIED="1620645903921" TEXT="1. Hadoop概述"><node CREATED="1620645903921" ID="ID_00c5b25137f1" MODIFIED="1620645903921" TEXT="HDFS (Hadoop&amp;nbsp;Distributed&amp;nbsp;File&amp;nbsp;System：&amp;nbsp;分布式文件存储)"><node CREATED="1620645903921" ID="ID_7124cc6dd0e2" MODIFIED="1620645903921" TEXT="适用场景："><node CREATED="1620645903921" ID="ID_659da5e50f98" MODIFIED="1620645903921" TEXT="高吞吐量（high&amp;nbsp;throughput）来访问应用程序的数据，适合那些有着超大数据集的应用程序，这有可能会以延迟为代价。（低延迟看HBASE）。"></node><node CREATED="1620645903921" ID="ID_25a59180ed3a" MODIFIED="1620645903921" TEXT="高容错性（fault-tolerant），设计用来部署在低廉的硬件上。"></node><node CREATED="1620645903921" ID="ID_590ee3113dae" MODIFIED="1620645903921" TEXT="以流式数据访问模式存储超大文件而设计的文件系统。流式数据访问：一次写入、多次读取模式。"></node></node><node CREATED="1620645903921" ID="ID_934b6e60378e" MODIFIED="1620645903921" TEXT="一个理想的分片大小往往是一个HDFS block的大小，默认是64MB（可以通过配置文件指定）"><node CREATED="1620645903921" ID="ID_d47fe2f72c51" MODIFIED="1620645903921" TEXT="大量的小文件：namenode存储着文件系统的元数据，文件数量的限制也由namenode的内存量决定。每个文件，索引目录以及块占大约150个字节，因此，如果有一百万文件，每个文件占一个块，就至少需要300MB的内存。"></node><node CREATED="1620645903921" ID="ID_ce494b16defc" MODIFIED="1620645903921" TEXT="HDFS的块比磁盘的块大，目的是为了减少寻址的开销。"></node></node></node><node CREATED="1620645903921" ID="ID_9bd5320ffad9" MODIFIED="1620645903921" TEXT="MapReduce"><node CREATED="1620645903921" ID="ID_cd69d4f0b424" MODIFIED="1620645903921" TEXT="存因"><node CREATED="1620645903921" ID="ID_8c0c045380ba" MODIFIED="1620645903921" TEXT="寻址时间长，慢于传输速率的发展历史。如果数据的访问模式中包含大量的磁盘寻址，比较适合以批处理的方式处理需要分析整个数据集，mapreduce流式读取hdfs块。"></node></node><node CREATED="1620645903921" ID="ID_b8d2f5303784" MODIFIED="1620645903921" TEXT="分布式体现"><node CREATED="1620645903921" ID="ID_20c8e849d11a" MODIFIED="1620645903921" TEXT="一个基于集群的高性能并行计算平台（Cluster&amp;nbsp;Infrastructure）"></node><node CREATED="1620645903921" ID="ID_b709753b3a8c" MODIFIED="1620645903921" TEXT="一个并行计算与运行软件框架（Software&amp;nbsp;Framework）"><node CREATED="1620645903921" ID="ID_014b4d599cc3" MODIFIED="1620645903921" TEXT="将用户编写的业务逻辑代码和自带默认组件整合成一个完整的分布式运算程序，运行在 yarn 集群"></node></node><node CREATED="1620645903921" ID="ID_f942ce7e7dfc" MODIFIED="1620645903921" TEXT="一个并行程序设计模型与方法（Programming&amp;nbsp;Model&amp;nbsp;&amp;amp;&amp;nbsp;Methodology）"></node></node><node CREATED="1620645903921" ID="ID_776c8b7ee68d" MODIFIED="1620645903921" TEXT="架构和执行过程"><node CREATED="1620645903921" ID="ID_fd7401a1ed0e" MODIFIED="1620645903921"></node><node CREATED="1620645903921" ID="ID_2947b2b4113b" MODIFIED="1620645903921"></node></node><node CREATED="1620645903921" ID="ID_4e19af6405f0" MODIFIED="1620645903921" TEXT="数据类型：&amp;lt;key,value&amp;gt;键值对"><node CREATED="1620645903921" ID="ID_3de331285e62" MODIFIED="1620645903921" TEXT="数据流在走的时候，其实就是键值对的不断转换，把一个键值对变成另外一个键值对"></node><node CREATED="1620645903921" ID="ID_d13523a39964" MODIFIED="1620645903921" TEXT="MapReduce中的每个map任务可以细分2个阶段：record&amp;nbsp;reader（input format类，决定对源文件的读取方式）、继承Mapper类（重写map方法）"></node><node CREATED="1620645903921" ID="ID_c8d1481d365f" MODIFIED="1620645903921" TEXT="shuffle阶段可以分为4步：分区（对数据打标记）、排序、规约（可选，减少网络数据的传输和拷贝）、分组（相同key放在同一个集合）"></node><node CREATED="1620645903921" ID="ID_95c30408746a" MODIFIED="1620645903921" TEXT="reduce任务可以分为2个阶段：排序与合并（编写reducer函数来实现逻辑，继承Reducer类，重写reduce逻辑）、选择输出格式（抽象成了OutputFormat类）"></node></node><node CREATED="1620645903921" ID="ID_02a81a23ae9e" MODIFIED="1620645903921" TEXT="被逐渐淘汰原因"><node CREATED="1620645903921" ID="ID_2f7d939a2505" MODIFIED="1620645903921" TEXT="1.&amp;nbsp;高昂的维护成本"><node CREATED="1620645903921" ID="ID_73088ec5722c" MODIFIED="1620645903921" TEXT="在应用过程中，每一个MapReduce任务都有可能出错，都需要重试和异常处理的机制。&amp;lt;br&amp;gt;协调这些子MapReduce的任务往往需要和业务逻辑紧密耦合的状态机，过于复杂的维护让系统开发者苦不堪言。"></node></node><node CREATED="1620645903921" ID="ID_abe118782496" MODIFIED="1620645903921" TEXT="2. 复杂的性能优化配置"><node CREATED="1620645903921" ID="ID_585d31792a9a" MODIFIED="1620645903921" TEXT="在MapReduce的性能配置上花了非常多的时间。包括了缓冲大小(buffer&amp;nbsp;size），分片多少（number&amp;nbsp;of&amp;nbsp;shards），预抓取策略（prefetch），缓存大小（cache&amp;nbsp;size）等等"><node CREATED="1620645903921" ID="ID_141acfc6e688" MODIFIED="1620645903921" TEXT="应对: google的动态分片技术"></node></node></node></node></node><node CREATED="1620645903921" ID="ID_0e340348cf1d" MODIFIED="1620645903921" TEXT="Yarn"><node CREATED="1620645903921" ID="ID_51945cf1427f" MODIFIED="1620645903921" TEXT="Yet&amp;nbsp;Another&amp;nbsp;Resource&amp;nbsp;Negotiator: 分布式资源调度系统"><node CREATED="1620645903921" ID="ID_cfd1eb52982b" MODIFIED="1620645903921" TEXT="Hadoop1.0&amp;nbsp;中架构的缺陷，在&amp;nbsp;MapReduce&amp;nbsp;中，jobTracker&amp;nbsp;担负起了太多的责任了，接收任务是它，资源调度是它，监控&amp;nbsp;TaskTracker&amp;nbsp;运行情况还是它。将&amp;nbsp;jobTracker&amp;nbsp;进行拆分，将其中部分功能拆解出来"></node></node><node CREATED="1620645903921" ID="ID_43a03d42f23c" MODIFIED="1620645903921" TEXT="主从架构"><node CREATED="1620645903921" ID="ID_ac96df121ae3" MODIFIED="1620645903921" TEXT="主节点：ResourceManager"><node CREATED="1620645903921" ID="ID_3727242fcf16" MODIFIED="1620645903921" TEXT="整个计算任务资源的调度和分配"></node></node><node CREATED="1620645903921" ID="ID_20652ccee7db" MODIFIED="1620645903921" TEXT="从节点：NodeManager"><node CREATED="1620645903921" ID="ID_88a14954475f" MODIFIED="1620645903921" TEXT="执行具体的运算"></node></node></node><node CREATED="1620645903921" ID="ID_02c45029802e" MODIFIED="1620645903921" TEXT="提交一个程序所经历的简单流程：&amp;lt;br&amp;gt;1. Client&amp;nbsp;向&amp;nbsp;Yarn&amp;nbsp;提交&amp;nbsp;Application，这里我们假设是一个&amp;nbsp;MapReduce&amp;nbsp;作业。&amp;lt;br&amp;gt;2. ResourceManager&amp;nbsp;向&amp;nbsp;NodeManager&amp;nbsp;通信，为该&amp;nbsp;Application&amp;nbsp;分配第一个容器。并在这个容器中运行这个应用程序对应的&amp;nbsp;ApplicationMaster。&amp;lt;br&amp;gt;3. ApplicationMaster&amp;nbsp;启动以后，对&amp;nbsp;作业（也就是&amp;nbsp;Application）&amp;nbsp;进行拆分，拆分&amp;nbsp;task&amp;nbsp;出来，这些&amp;nbsp;task&amp;nbsp;可以运行在一个或多个容器中。然后向&amp;nbsp;ResourceManager&amp;nbsp;申请要运行程序的容器，并定时向&amp;nbsp;ResourceManager&amp;nbsp;发送心跳。&amp;lt;br&amp;gt;4. 申请到容器后，ApplicationMaster&amp;nbsp;会去和容器对应的&amp;nbsp;NodeManager&amp;nbsp;通信，而后将作业分发到对应的&amp;nbsp;NodeManager&amp;nbsp;中的容器去运行，这里会将拆分后的&amp;nbsp;MapReduce&amp;nbsp;进行分发，对应容器中运行的可能是&amp;nbsp;Map&amp;nbsp;任务，也可能是&amp;nbsp;Reduce&amp;nbsp;任务。&amp;lt;br&amp;gt;5. 容器中运行的任务会向&amp;nbsp;ApplicationMaster&amp;nbsp;发送心跳，汇报自身情况。当程序运行完成后，&amp;nbsp;ApplicationMaster&amp;nbsp;再向&amp;nbsp;ResourceManager&amp;nbsp;注销并释放容器资源。&amp;lt;br&amp;gt;"></node></node></node><node CREATED="1620645903921" ID="ID_84d1cdcf6f18" POSITION="right" MODIFIED="1620645903921" TEXT="2. 流程详解"><node CREATED="1620645903921" ID="ID_5b1fe40e36b3" MODIFIED="1620645903921" TEXT="添加打包方式，如&amp;lt;packaging&amp;gt;jar&amp;lt;/packaging&amp;gt;"></node><node CREATED="1620645903921" ID="ID_faa1c06621d4" MODIFIED="1620645903921" TEXT="map"><node CREATED="1620645903921" ID="ID_805a0f1a1b64" MODIFIED="1620645903921" TEXT="继承InputFormat, 用对应的接口，或者改写为自己的方法"></node><node CREATED="1620645903921" ID="ID_cf401253873e" MODIFIED="1620645903921" TEXT="继承Mapper，重写map方法"><node CREATED="1620645903921" ID="ID_d05f8b78e73c" MODIFIED="1620645903921" TEXT="样例"></node></node></node><node CREATED="1620645903921" ID="ID_893a584065da" MODIFIED="1620645903921" TEXT="shuffle"><node CREATED="1620645903921" ID="ID_d83f29297077" MODIFIED="1620645903921" TEXT="分区"><node CREATED="1620645903921" ID="ID_beb34995dbf4" MODIFIED="1620645903921" TEXT="也即给数据打一个标记，通过指定分区，将同一个分区的数据发送到同一个reduce当中进行处理"></node><node CREATED="1620645903921" ID="ID_f99e50974002" MODIFIED="1620645903921"></node><node CREATED="1620645903921" ID="ID_e2667f8ca467" MODIFIED="1620645903921" TEXT="代码样例"></node><node CREATED="1620645903921" ID="ID_c71fdd46579a" MODIFIED="1620645903921" TEXT="在主类中设置分区类和ReduceTask个数"><node CREATED="1620645903921" ID="ID_d1717d06ebef" MODIFIED="1620645903921" TEXT="样例"></node></node></node><node CREATED="1620645903921" ID="ID_e52e93e11f82" MODIFIED="1620645903921" TEXT="排序和序列化"><node CREATED="1620645903921" ID="ID_d561617a6c7e" MODIFIED="1620645903921" TEXT="Java&amp;nbsp;的序列化&amp;nbsp;(Serializable)&amp;nbsp;是一个重量级序列化框架,&amp;nbsp;一个对象被序列化后,&amp;nbsp;会附带很多额&amp;lt;br&amp;gt;外的信息&amp;nbsp;(各种校验信息,&amp;nbsp;header,&amp;nbsp;继承体系等）,&amp;nbsp;不便于在网络中高效传输.&amp;nbsp;所以,&amp;nbsp;Hadoop&amp;nbsp;&amp;lt;br&amp;gt;自己开发了一套序列化机制(Writable),&amp;nbsp;精简高效.&amp;nbsp;不用像&amp;nbsp;Java&amp;nbsp;对象类一样传输多层的父子&amp;lt;br&amp;gt;关系,&amp;nbsp;需要哪个属性就传输哪个属性值,&amp;nbsp;大大的减少网络传输的开销"></node><node CREATED="1620645903921" ID="ID_7e3a62303be1" MODIFIED="1620645903921" TEXT="Writable&amp;nbsp;是&amp;nbsp;Hadoop&amp;nbsp;的序列化格式,&amp;nbsp;Hadoop&amp;nbsp;定义了这样一个&amp;nbsp;Writable&amp;nbsp;接口.&amp;nbsp;一个类要支持可&amp;lt;br&amp;gt;序列化只需实现这个接口即可"></node><node CREATED="1620645903921" ID="ID_2aad937bb4d6" MODIFIED="1620645903921" TEXT="快排法"></node></node><node CREATED="1620645903921" ID="ID_486bc42eca4b" MODIFIED="1620645903921" TEXT="规约"><node CREATED="1620645903921" ID="ID_26c08b0eabf0" MODIFIED="1620645903921" TEXT="每一个&amp;nbsp;map&amp;nbsp;都可能会产生大量的本地输出，Combiner&amp;nbsp;的作用就是对&amp;nbsp;map&amp;nbsp;端的输出先做一次&amp;lt;br&amp;gt;合并，以减少在&amp;nbsp;map&amp;nbsp;和&amp;nbsp;reduce&amp;nbsp;节点之间的数据传输量，以提高网络IO&amp;nbsp;性能，是&amp;nbsp;MapReduce&amp;lt;br&amp;gt;的一种优化手段之一"></node><node CREATED="1620645903921" ID="ID_46927a80a12a" MODIFIED="1620645903921" TEXT="combiner&amp;nbsp;是&amp;nbsp;MR&amp;nbsp;程序中&amp;nbsp;Mapper&amp;nbsp;和&amp;nbsp;Reducer&amp;nbsp;之外的一种组件，combiner&amp;nbsp;组件的父类就是&amp;nbsp;Reducer，combiner&amp;nbsp;和&amp;nbsp;reducer&amp;nbsp;的区别在于运行的位置，Combiner&amp;nbsp;是在每一个&amp;nbsp;maptask&amp;nbsp;所在的节点运行，Reducer&amp;nbsp;是接收全局所有&amp;nbsp;Mapper&amp;nbsp;的输出结果"></node><node CREATED="1620645903921" ID="ID_484ecc70884f" MODIFIED="1620645903921" TEXT="实现步骤"><node CREATED="1620645903921" ID="ID_ec11aa9c275a" MODIFIED="1620645903921" TEXT="1.自定义一个&amp;nbsp;combiner&amp;nbsp;继承&amp;nbsp;Reducer，重写&amp;nbsp;reduce&amp;nbsp;方法&amp;lt;br&amp;gt;2.&amp;nbsp;在&amp;nbsp;job&amp;nbsp;中设置&amp;nbsp;job.setCombinerClass(CustomCombiner.class)&amp;lt;br&amp;gt;3. combiner&amp;nbsp;能够应用的前提是不能影响最终的业务逻辑，而且，combiner&amp;nbsp;的输出&amp;nbsp;kv&amp;nbsp;应该跟&amp;lt;br&amp;gt;reducer&amp;nbsp;的输入&amp;nbsp;kv&amp;nbsp;类型要对应起来"></node></node><node CREATED="1620645903921" ID="ID_2972d860dd9f" MODIFIED="1620645903921" TEXT="样例：手机流量统计"></node></node><node CREATED="1620645903921" ID="ID_997c078cd0d1" MODIFIED="1620645903921" TEXT="分组"></node></node><node CREATED="1620645903921" ID="ID_c35ad7106b44" MODIFIED="1620645903921" TEXT="reduce"><node CREATED="1620645903921" ID="ID_c7fe77d78d42" MODIFIED="1620645903921" TEXT="继承Reducer，重写reduce方法"><node CREATED="1620645903921" ID="ID_58b308688362" MODIFIED="1620645903921" TEXT="样例"></node></node><node CREATED="1620645903921" ID="ID_adc4278f125f" MODIFIED="1620645903921" TEXT="继承OutputFormat,&amp;nbsp;用对应的接口，或者改写为自己的方法"></node></node><node CREATED="1620645903921" ID="ID_e55235554798" MODIFIED="1620645903921" TEXT="主类代码 (将八个步骤串到一起)"><node CREATED="1620645903921" ID="ID_65742fcc61a7" MODIFIED="1620645903921" TEXT="extends Configured implements Tool"></node><node CREATED="1620645903921" ID="ID_a5212561bbac" MODIFIED="1620645903921" TEXT="重写run方法"><node CREATED="1620645903921" ID="ID_12c19af0d804" MODIFIED="1620645903921" TEXT="创建job任务对象（Job.getInstance）"></node><node CREATED="1620645903921" ID="ID_c4d35b50f4c2" MODIFIED="1620645903921" TEXT="配置job任务对象（八个步骤）"><node CREATED="1620645903921" ID="ID_2dcf6351dae8" MODIFIED="1620645903921" TEXT="1. 指定文件的读取方式和读取路径"><node CREATED="1620645903921" ID="ID_508b2b88d731" MODIFIED="1620645903921" TEXT="job.setInputFortmatClass"></node><node CREATED="1620645903921" ID="ID_d81c0e255f57" MODIFIED="1620645903921" TEXT="TextInputFormat.addInputPath"></node></node><node CREATED="1620645903921" ID="ID_c64af8471739" MODIFIED="1620645903921" TEXT="2. 指定Map阶段的处理方式"><node CREATED="1620645903921" ID="ID_9fa04ac3a0bc" MODIFIED="1620645903921" TEXT="job.setMapperClass"></node><node CREATED="1620645903921" ID="ID_f2a5f173633e" MODIFIED="1620645903921" TEXT="设置Map阶段K2的类型"><node CREATED="1620645903921" ID="ID_a4fee2796b81" MODIFIED="1620645903921" TEXT="job.setMapOutKeyClass"></node></node><node CREATED="1620645903921" ID="ID_1e6aaf529ad4" MODIFIED="1620645903921" TEXT="设置Map阶段V2的类型"><node CREATED="1620645903921" ID="ID_373e78d1fc9b" MODIFIED="1620645903921" TEXT="job.setMapOutputValueClass"></node></node></node><node CREATED="1620645903921" ID="ID_946f8f7cbdf3" MODIFIED="1620645903921" TEXT="3. 分区"></node><node CREATED="1620645903921" ID="ID_36bb07229957" MODIFIED="1620645903921" TEXT="4. 排序"></node><node CREATED="1620645903921" ID="ID_1b06d7309b2a" MODIFIED="1620645903921" TEXT="5. 规约"></node><node CREATED="1620645903921" ID="ID_b6ad907bb527" MODIFIED="1620645903921" TEXT="6. 分组"></node><node CREATED="1620645903921" ID="ID_13159d702029" MODIFIED="1620645903921" TEXT="7. 指定reduce阶段的处理方式和数据类型"><node CREATED="1620645903921" ID="ID_4c6493374c00" MODIFIED="1620645903921" TEXT="job.setReducerClass"></node><node CREATED="1620645903921" ID="ID_6f43e105e125" MODIFIED="1620645903921" TEXT="设置Reduce阶段K3的类型"><node CREATED="1620645903921" ID="ID_8897b08181ce" MODIFIED="1620645903921" TEXT="job.setOuputKeyClass"></node></node><node CREATED="1620645903921" ID="ID_f3ef88fb86a1" MODIFIED="1620645903921" TEXT="设置Reduce阶段V3的类型"><node CREATED="1620645903921" ID="ID_df2b4a18c3da" MODIFIED="1620645903921" TEXT="job.setOutputValueClass"></node></node></node><node CREATED="1620645903921" ID="ID_1ef9bd140078" MODIFIED="1620645903921" TEXT="8. 设置输出类型"><node CREATED="1620645903921" ID="ID_271efacf07d9" MODIFIED="1620645903921" TEXT="job.setOutputFortmatClass"></node><node CREATED="1620645903921" ID="ID_6d6300be096c" MODIFIED="1620645903921" TEXT="TextOutputFormat.setOutputPath"></node></node><node CREATED="1620645903921" ID="ID_646e3a356837" MODIFIED="1620645903921" TEXT="等待任务结束"><node CREATED="1620645903921" ID="ID_7a0ceb89a414" MODIFIED="1620645903921" TEXT="boolean bl = job.waitForCompletion(true)&amp;nbsp; return bl?0:1"></node></node></node></node><node CREATED="1620645903921" ID="ID_34b242cb791f" MODIFIED="1620645903921" TEXT="main"><node CREATED="1620645903921" ID="ID_ade58fb39daf" MODIFIED="1620645903921" TEXT="启动job任务（ToolRunner.run），入口"><node CREATED="1620645903921" ID="ID_8525223cb9e6" MODIFIED="1620645903921" TEXT="样例"></node></node></node></node><node CREATED="1620645903921" ID="ID_91dda261c98c" MODIFIED="1620645903921" TEXT="运行"><node CREATED="1620645903921" ID="ID_a5db32679010" MODIFIED="1620645903921" TEXT="集群运行模式"><node CREATED="1620645903921" ID="ID_f8020e201e6c" MODIFIED="1620645903921" TEXT="1. 将mapreduce程序交给yarn集群，分发到很多节点上并发执行"></node><node CREATED="1620645903921" ID="ID_2bdfbd4826b8" MODIFIED="1620645903921" TEXT="2. 处理的数据和输出结果位于HDFS文件系统"></node><node CREATED="1620645903921" ID="ID_521f3d9de951" MODIFIED="1620645903921" TEXT="3. 实现步骤： 将程序打成JAR包，并上传，然后在集群上用hadoop命令启动"><node CREATED="1620645903921" ID="ID_8889d3033c4d" MODIFIED="1620645903921" TEXT="hadoop&amp;nbsp; &amp;nbsp;jar&amp;nbsp; &amp;nbsp; jar包名字.jar&amp;nbsp; &amp;nbsp;jar包中主方法的全路径名"></node></node></node><node CREATED="1620645903921" ID="ID_5f3068d04390" MODIFIED="1620645903921" TEXT="本地运行模式"><node CREATED="1620645903921" ID="ID_ebe12dcaecbe" MODIFIED="1620645903921"></node></node></node></node><node CREATED="1620645903921" ID="ID_cdce42bd6a07" POSITION="right" MODIFIED="1620645903921" TEXT="Map详细机制"><node CREATED="1620645903921" ID="ID_4b8f374d4da6" MODIFIED="1620645903921" TEXT="inputFile通过split被逻辑切分为多个split文件，通过Record按行读取内容给&amp;lt;br&amp;gt;map（用户自己实现的）进行处理，数据被map处理结束之后交给OutputCollector收集器，对&amp;lt;br&amp;gt;其结果key进行分区（默认使用hash分区），然后写入buwer，每个map&amp;nbsp;task都有一个内存缓冲&amp;lt;br&amp;gt;区，存储着map的输出结果，当缓冲区快满的时候需要将缓冲区的数据以一个临时文件的方&amp;lt;br&amp;gt;式存放到磁盘，当整个map&amp;nbsp;task结束后再对磁盘中这个map&amp;nbsp;task产生的所有临时文件做合并，&amp;lt;br&amp;gt;生成最终的正式输出文件，然后等待reduce&amp;nbsp;task来拉数据"><node CREATED="1620645903921" ID="ID_a76bfed912f4" MODIFIED="1620645903921" TEXT="1.&amp;nbsp;读取数据组件&amp;nbsp;InputFormat&amp;nbsp;(默认&amp;nbsp;TextInputFormat)&amp;nbsp;会通过&amp;nbsp;getSplits&amp;nbsp;方法对输入目录&amp;lt;br&amp;gt;中文件进行逻辑切片规划得到&amp;nbsp;block&amp;nbsp;,&amp;nbsp;有多少个&amp;nbsp;block&amp;nbsp;就对应启动多少个&amp;nbsp;MapTask&amp;nbsp;."></node><node CREATED="1620645903921" ID="ID_4806dde0dcb0" MODIFIED="1620645903921" TEXT="2.&amp;nbsp;将输入文件切分为&amp;nbsp;block&amp;nbsp;之后,&amp;nbsp;由&amp;nbsp;RecordReader&amp;nbsp;对象&amp;nbsp;(默认是LineRecordReader)&amp;nbsp;进&amp;nbsp;行读取,&amp;nbsp;以&amp;nbsp;\n&amp;nbsp;作为分隔符,&amp;nbsp;读取一行数据,&amp;nbsp;返回&amp;nbsp;&amp;lt;key，value&amp;gt;&amp;nbsp;.&amp;nbsp;Key&amp;nbsp;表示每行首字符偏&amp;lt;br&amp;gt;移值,&amp;nbsp;Value&amp;nbsp;表示这一行文本内容"></node><node CREATED="1620645903921" ID="ID_35d7e17e5ba1" MODIFIED="1620645903921" TEXT="3. 读取&amp;nbsp;block&amp;nbsp;返回&amp;nbsp;&amp;lt;key,value&amp;gt;&amp;nbsp;,&amp;nbsp;进入用户自己继承的&amp;nbsp;Mapper&amp;nbsp;类中，执行用户重写&amp;lt;br&amp;gt;的&amp;nbsp;map&amp;nbsp;函数,&amp;nbsp;RecordReader&amp;nbsp;读取一行这里调用一次"></node><node CREATED="1620645903921" ID="ID_02bae1e47e89" MODIFIED="1620645903921" TEXT="4. Mapper&amp;nbsp;逻辑结束之后,&amp;nbsp;将&amp;nbsp;Mapper&amp;nbsp;的每条结果通过&amp;nbsp;context.write&amp;nbsp;进行collect数据收&amp;lt;br&amp;gt;集.&amp;nbsp;在&amp;nbsp;collect&amp;nbsp;中,&amp;nbsp;会先对其进行分区处理，默认使用&amp;nbsp;HashPartitioner"></node><node CREATED="1620645903921" ID="ID_ee788c916059" MODIFIED="1620645903921" TEXT="5. 接下来,&amp;nbsp;会将数据写入内存,&amp;nbsp;内存中这片区域叫做环形缓冲区,&amp;nbsp;缓冲区的作用是批量收集&amp;lt;br&amp;gt;Mapper&amp;nbsp;结果,&amp;nbsp;减少磁盘&amp;nbsp;IO&amp;nbsp;的影响.&amp;nbsp;我们的&amp;nbsp;Key/Value&amp;nbsp;对以及&amp;nbsp;Partition&amp;nbsp;的结果都会被写入&amp;lt;br&amp;gt;缓冲区.&amp;nbsp;当然,&amp;nbsp;写入之前，Key&amp;nbsp;与&amp;nbsp;Value&amp;nbsp;值都会被序列化成字节数组"></node><node CREATED="1620645903921" ID="ID_4c62797c80fd" MODIFIED="1620645903921" TEXT="6. 当溢写线程启动后,&amp;nbsp;需要对这&amp;nbsp;80MB&amp;nbsp;空间内的&amp;nbsp;Key&amp;nbsp;做排序&amp;nbsp;(Sort).&amp;nbsp;排序是&amp;nbsp;MapReduce&amp;nbsp;模型&amp;lt;br&amp;gt;默认的行为,&amp;nbsp;这里的排序也是对序列化的字节做的排序"></node><node CREATED="1620645903921" ID="ID_8a0dc73f7506" MODIFIED="1620645903921" TEXT="7. 合并溢写文件,&amp;nbsp;每次溢写会在磁盘上生成一个临时文件&amp;nbsp;(写之前判断是否有&amp;nbsp;Combiner),&amp;nbsp;如&amp;nbsp;果&amp;nbsp;Mapper&amp;nbsp;的输出结果真的很大,&amp;nbsp;有多次这样的溢写发生,&amp;nbsp;磁盘上相应的就会有多个临时文&amp;lt;br&amp;gt;件存在.&amp;nbsp;当整个数据处理结束之后开始对磁盘中的临时文件进行&amp;nbsp;Merge&amp;nbsp;合并,&amp;nbsp;因为最终的&amp;lt;br&amp;gt;文件只有一个,&amp;nbsp;写入磁盘,&amp;nbsp;并且为这个文件提供了一个索引文件,&amp;nbsp;以记录每个reduce对应数&amp;lt;br&amp;gt;据的偏移量"></node></node></node><node CREATED="1620645903921" ID="ID_aa32d8bc8e22" POSITION="right" MODIFIED="1620645903921" TEXT="Reduce详细机制"><node CREATED="1620645903921" ID="ID_9d325fd4992b" MODIFIED="1620645903921" TEXT="Reduce&amp;nbsp;大致分为&amp;nbsp;copy、sort、reduce&amp;nbsp;三个阶段，重点在前两个阶段。copy&amp;nbsp;阶段包含一个&amp;lt;br&amp;gt;eventFetcher&amp;nbsp;来获取已完成的&amp;nbsp;map&amp;nbsp;列表，由&amp;nbsp;Fetcher&amp;nbsp;线程去&amp;nbsp;copy&amp;nbsp;数据，在此过程中会启动两&amp;lt;br&amp;gt;个&amp;nbsp;merge&amp;nbsp;线程，分别为&amp;nbsp;inMemoryMerger&amp;nbsp;和&amp;nbsp;onDiskMerger，分别将内存中的数据&amp;nbsp;merge&amp;nbsp;到磁&amp;lt;br&amp;gt;盘和将磁盘中的数据进行&amp;nbsp;merge。待数据&amp;nbsp;copy&amp;nbsp;完成之后，copy&amp;nbsp;阶段就完成了，开始进行&amp;nbsp;sort阶段，sort&amp;nbsp;阶段主要是执行&amp;nbsp;finalMerge&amp;nbsp;操作，纯粹的&amp;nbsp;sort&amp;nbsp;阶段，完成之后就是&amp;nbsp;reduce&amp;nbsp;阶段，&amp;lt;br&amp;gt;调用用户定义的&amp;nbsp;reduce&amp;nbsp;函数进行处理"><node CREATED="1620645903921" ID="ID_2535c94f890c" MODIFIED="1620645903921" TEXT="1. Copy阶段&amp;nbsp;，简单地拉取数据。Reduce进程启动一些数据copy线程(Fetcher)，通过HTTP&amp;lt;br&amp;gt;方式请求maptask获取属于自己的文件。&amp;lt;br&amp;gt;2.&amp;nbsp;Merge阶段&amp;nbsp;。这里的merge如map端的merge动作，只是数组中存放的是不同map端&amp;lt;br&amp;gt;copy来的数值。Copy过来的数据会先放入内存缓冲区中，这里的缓冲区大小要比map端&amp;lt;br&amp;gt;的更为灵活。merge有三种形式：内存到内存；内存到磁盘；磁盘到磁盘。默认情况下第&amp;lt;br&amp;gt;一种形式不启用。当内存中的数据量到达一定阈值，就启动内存到磁盘的merge。与map&amp;nbsp;&amp;lt;br&amp;gt;端类似，这也是溢写的过程，这个过程中如果你设置有Combiner，也是会启用的，然后&amp;lt;br&amp;gt;在磁盘中生成了众多的溢写文件。第二种merge方式一直在运行，直到没有map端的数据&amp;lt;br&amp;gt;时才结束，然后启动第三种磁盘到磁盘的merge方式生成最终的文件。&amp;lt;br&amp;gt;3.&amp;nbsp;合并排序&amp;nbsp;。把分散的数据合并成一个大的数据后，还会再对合并后的数据排序。&amp;lt;br&amp;gt;4.&amp;nbsp;对排序后的键值对调用reduce方法&amp;nbsp;，键相等的键值对调用一次reduce方法，每次调用会&amp;lt;br&amp;gt;产生零个或者多个键值对，最后把这些输出的键值对写入到HDFS文件中。"></node></node></node><node CREATED="1620645903921" ID="ID_7dbc95fa9f79" POSITION="right" MODIFIED="1620645903921" TEXT="计数器"><node CREATED="1620645903921" ID="ID_5c9ccac3fe56" MODIFIED="1620645903921" TEXT="辅助诊断系统故障"></node><node CREATED="1620645903921" ID="ID_136a51faedbe" MODIFIED="1620645903921" TEXT="1. 通过context上下文对象可以获取我们的计数器&amp;lt;br&amp;gt;"><node CREATED="1620645903921" ID="ID_eb7f040449a8" MODIFIED="1620645903921" TEXT="样例代码"></node></node><node CREATED="1620645903921" ID="ID_986a245c1cf5" MODIFIED="1620645903921" TEXT="2.&amp;nbsp;通过enum枚举类型来定义计数器"><node CREATED="1620645903921" ID="ID_53b4e6e3ecaf" MODIFIED="1620645903921" TEXT="样例代码"></node></node></node><node CREATED="1620645903921" ID="ID_9c9047803e79" POSITION="right" MODIFIED="1620645903921" TEXT="综合案例"><node CREATED="1620645903921" ID="ID_ff77f8d17ff8" MODIFIED="1620645903921" TEXT="1. 词频统计wordcount"><node CREATED="1620645903921" ID="ID_cfd345711da5" MODIFIED="1620645903921" TEXT="子主题"></node></node><node CREATED="1620645903921" ID="ID_ef94a68d1489" MODIFIED="1620645903921" TEXT="2. 手机流量统计、求和"></node><node CREATED="1620645903921" ID="ID_68abd8b375cf" MODIFIED="1620645903921" TEXT="3. 实现join操作"><node CREATED="1620645903921" ID="ID_bf4718efc88f" MODIFIED="1620645903921" TEXT="map端"><node CREATED="1620645903921" ID="ID_b07600f7091a" MODIFIED="1620645903921"></node></node><node CREATED="1620645903921" ID="ID_ea038d3172f2" MODIFIED="1620645903921" TEXT="reduce端"><node CREATED="1620645903921" ID="ID_c37847cd6c41" MODIFIED="1620645903921"></node><node CREATED="1620645903921" ID="ID_335659797d3b" MODIFIED="1620645903921" TEXT="存在的问题"><node CREATED="1620645903921" ID="ID_6f1b224a2bc0" MODIFIED="1620645903921"></node></node></node></node><node CREATED="1620645903921" ID="ID_e6b40247d0c6" MODIFIED="1620645903921" TEXT="4. 求共同好友"><node CREATED="1620645903921" ID="ID_2fc1b66ce068" MODIFIED="1620645903921"></node></node><node CREATED="1620645903921" ID="ID_5927e337a61a" MODIFIED="1620645903921" TEXT="5. 小文件合并"><node CREATED="1620645903921" ID="ID_c3e5b34686dd" MODIFIED="1620645903921" TEXT="自定义inputformat"></node></node><node CREATED="1620645903921" ID="ID_8d2e5f6cd3b5" MODIFIED="1620645903921" TEXT="6.求TopN"><node CREATED="1620645903921" ID="ID_baa293b08bc4" MODIFIED="1620645903921" TEXT="自定义分组"><node CREATED="1620645903921" ID="ID_4e403a6ad967" MODIFIED="1620645903921" TEXT="自定义分组"></node></node></node><node CREATED="1620645903921" ID="ID_d64ee004546b" MODIFIED="1620645903921" TEXT="7. 自动逸outpuutformat"><node CREATED="1620645903921" ID="ID_3e764920f33e" MODIFIED="1620645903921"></node></node></node><node CREATED="1620645903921" ID="ID_4a00ef279536" POSITION="right" MODIFIED="1620645903921" TEXT="和oracle分区的相似与不同之处"><node CREATED="1620645903921" ID="ID_f2b631c733fb" MODIFIED="1620645903921" TEXT="1. 结果是否缓存下来"></node><node CREATED="1620645903921" ID="ID_5d2b8ac69dd0" MODIFIED="1620645903921" TEXT="2. 寻址的需求，一次写入，多次读取"></node></node><node CREATED="1620645903921" ID="ID_64b6b8f7da64" POSITION="right" MODIFIED="1620645903921" TEXT="shuffle详细机制"><node CREATED="1620645903921" ID="ID_fdb18ebe7203" MODIFIED="1620645903921" TEXT="1.&amp;nbsp;Collect阶段&amp;nbsp;：将&amp;nbsp;MapTask&amp;nbsp;的结果输出到默认大小为&amp;nbsp;100M&amp;nbsp;的环形缓冲区，保存的是&amp;lt;br&amp;gt;key/value，Partition&amp;nbsp;分区信息等。&amp;lt;br&amp;gt;2.&amp;nbsp;Spill阶段&amp;nbsp;：当内存中的数据量达到一定的阀值的时候，就会将数据写入本地磁盘，&amp;lt;br&amp;gt;在将数据写入磁盘之前需要对数据进行一次排序的操作，如果配置了&amp;nbsp;combiner，还会将&amp;lt;br&amp;gt;有相同分区号和&amp;nbsp;key&amp;nbsp;的数据进行排序。&amp;lt;br&amp;gt;3.&amp;nbsp;Merge阶段&amp;nbsp;：把所有溢出的临时文件进行一次合并操作，以确保一个&amp;nbsp;MapTask&amp;nbsp;最终只&amp;lt;br&amp;gt;产生一个中间数据文件。&amp;lt;br&amp;gt;4.&amp;nbsp;Copy阶段&amp;nbsp;：ReduceTask&amp;nbsp;启动&amp;nbsp;Fetcher&amp;nbsp;线程到已经完成&amp;nbsp;MapTask&amp;nbsp;的节点上复制一份属于&amp;lt;br&amp;gt;自己的数据，这些数据默认会保存在内存的缓冲区中，当内存的缓冲区达到一定的阀值&amp;lt;br&amp;gt;的时候，就会将数据写到磁盘之上。&amp;lt;br&amp;gt;5.&amp;nbsp;Merge阶段&amp;nbsp;：在&amp;nbsp;ReduceTask&amp;nbsp;远程复制数据的同时，会在后台开启两个线程对内存到本&amp;lt;br&amp;gt;地的数据文件进行合并操作。&amp;lt;br&amp;gt;6.&amp;nbsp;Sort阶段&amp;nbsp;：在对数据进行合并的同时，会进行排序操作，由于&amp;nbsp;MapTask&amp;nbsp;阶段已经对数&amp;lt;br&amp;gt;据进行了局部的排序，ReduceTask&amp;nbsp;只需保证&amp;nbsp;Copy&amp;nbsp;的数据的最终整体有效性即可。&amp;lt;br&amp;gt;Shuwle&amp;nbsp;中的缓冲区大小会影响到&amp;nbsp;mapreduce&amp;nbsp;程序的执行效率，原则上说，缓冲区越大，&amp;lt;br&amp;gt;磁盘io的次数越少，执行速度就越快&amp;lt;br&amp;gt;缓冲区的大小可以通过参数调整,&amp;nbsp;参数：mapreduce.task.io.sort.mb&amp;nbsp;默认100M"></node></node><node CREATED="1620645903921" ID="ID_e0e07edf31c1" POSITION="right" MODIFIED="1620645903921" TEXT="总结"></node></node></map>